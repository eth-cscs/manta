#compdef manta

autoload -U is-at-least

_manta() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_manta_commands" \
"*::: :->manta" \
&& ret=0
    case $state in
    (manta)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-command-$line[1]:"
        case $line[1] in
            (config)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-command-$line[1]:"
        case $line[1] in
            (show)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(set)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__config__set_commands" \
"*::: :->set" \
&& ret=0

    case $state in
    (set)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-set-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':HSM_GROUP_NAME -- hsm group name:_default' \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':HSM_GROUP_NAME -- hsm group name:_default' \
&& ret=0
;;
(site)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':SITE_NAME -- site name:_default' \
&& ret=0
;;
(log)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':LOG_LEVEL -- log verbority level:(error warn info debug trace)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__config__set__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-set-help-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(site)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(log)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(unset)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__config__unset_commands" \
"*::: :->unset" \
&& ret=0

    case $state in
    (unset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-unset-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(auth)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__config__unset__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-unset-help-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(auth)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(generate-autocomplete)
_arguments "${_arguments_options[@]}" : \
'-s+[Shell type. Will try to guess from \$SHELL if missing]:SHELL:(bash zsh fish)' \
'--shell=[Shell type. Will try to guess from \$SHELL if missing]:SHELL:(bash zsh fish)' \
'-p+[Path to put the autocomplete script or prints to stdout if missing. NOTE\: Do not specify filename, only path to directory]:PATH:_files' \
'--path=[Path to put the autocomplete script or prints to stdout if missing. NOTE\: Do not specify filename, only path to directory]:PATH:_files' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__config__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-help-command-$line[1]:"
        case $line[1] in
            (show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(set)
_arguments "${_arguments_options[@]}" : \
":: :_manta__config__help__set_commands" \
"*::: :->set" \
&& ret=0

    case $state in
    (set)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-help-set-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(site)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(log)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(unset)
_arguments "${_arguments_options[@]}" : \
":: :_manta__config__help__unset_commands" \
"*::: :->unset" \
&& ret=0

    case $state in
    (unset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-config-help-unset-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(auth)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(generate-autocomplete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-get-command-$line[1]:"
        case $line[1] in
            (hw-component)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__get__hw-component_commands" \
"*::: :->hw-component" \
&& ret=0

    case $state in
    (hw-component)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-get-hw-component-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
'-o+[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json summary details)' \
'--output=[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json summary details)' \
'-h[Print help]' \
'--help[Print help]' \
':CLUSTER_NAME -- Name of the cluster:_default' \
&& ret=0
;;
(node)
_arguments "${_arguments_options[@]}" : \
'-t+[Filters output to specific type]:TYPE:(Memory Processor NodeAccel NodeHsnNic Drive CabinetPDU CabinetPDUPowerConnector CMMRectifier NodeAccelRiser NodeEnclosurePowerSupplie NodeBMC RouterBMC)' \
'--type=[Filters output to specific type]:TYPE:(Memory Processor NodeAccel NodeHsnNic Drive CabinetPDU CabinetPDUPowerConnector CMMRectifier NodeAccelRiser NodeEnclosurePowerSupplie NodeBMC RouterBMC)' \
'-o+[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json)' \
'--output=[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json)' \
'-h[Print help]' \
'--help[Print help]' \
':XNAMES -- Comma separated list of xnames.
eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'':_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__get__hw-component__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-get-hw-component-help-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(sessions)
_arguments "${_arguments_options[@]}" : \
'-n+[Return only sessions with the given session name]:SESSION_NAME:_default' \
'--name=[Return only sessions with the given session name]:SESSION_NAME:_default' \
'-a+[Return only sessions older than the given age. Age is given in the format '\''1d'\'' or '\''6h'\'']:MIN_AGE:_default' \
'--min-age=[Return only sessions older than the given age. Age is given in the format '\''1d'\'' or '\''6h'\'']:MIN_AGE:_default' \
'-A+[Return only sessions younger than the given age. Age is given in the format '\''1d'\'' or '\''6h'\'']:MAX_AGE:_default' \
'--max-age=[Return only sessions younger than the given age. Age is given in the format '\''1d'\'' or '\''6h'\'']:MAX_AGE:_default' \
'-s+[Return only sessions with the given status]:SESSION_STATUS:(pending running complete)' \
'--status=[Return only sessions with the given status]:SESSION_STATUS:(pending running complete)' \
'-l+[Return only last <VALUE> sessions created]:VALUE:_default' \
'--limit=[Return only last <VALUE> sessions created]:VALUE:_default' \
'-o+[Output format. If missing, it will print output data in human redeable (table) format]:FORMAT:(json)' \
'--output=[Output format. If missing, it will print output data in human redeable (table) format]:FORMAT:(json)' \
'-x+[Comma separated list of xnames. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'']:XNAMES:_default' \
'--xnames=[Comma separated list of xnames. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'']:XNAMES:_default' \
'-H+[hsm group name]:HSM_GROUP_NAME:_default' \
'--hsm-group=[hsm group name]:HSM_GROUP_NAME:_default' \
'-m[Return only the most recent session created (equivalent to --limit 1)]' \
'--most-recent[Return only the most recent session created (equivalent to --limit 1)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(configurations)
_arguments "${_arguments_options[@]}" : \
'-n+[configuration name]:CONFIGURATION_NAME:_default' \
'--name=[configuration name]:CONFIGURATION_NAME:_default' \
'-p+[Glob pattern for configuration name]:CONFIGURATION_NAME_PATTERN:_default' \
'--pattern=[Glob pattern for configuration name]:CONFIGURATION_NAME_PATTERN:_default' \
'-l+[Filter records to the <VALUE> most common number of CFS configurations created]:VALUE:_default' \
'--limit=[Filter records to the <VALUE> most common number of CFS configurations created]:VALUE:_default' \
'-o+[Output format. If missing, it will print output data in human redeable (table) format]:FORMAT:(json)' \
'--output=[Output format. If missing, it will print output data in human redeable (table) format]:FORMAT:(json)' \
'-H+[hsm group name]:HSM_GROUP_NAME:_default' \
'--hsm-group=[hsm group name]:HSM_GROUP_NAME:_default' \
'-m[Only shows the most recent (equivalent to --limit 1)]' \
'--most-recent[Only shows the most recent (equivalent to --limit 1)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(templates)
_arguments "${_arguments_options[@]}" : \
'-n+[template name]:TEMPLATE_NAME:_default' \
'--name=[template name]:TEMPLATE_NAME:_default' \
'-l+[Filter records to the <VALUE> most common number of BOS templates created]:VALUE:_default' \
'--limit=[Filter records to the <VALUE> most common number of BOS templates created]:VALUE:_default' \
'-H+[hsm group name]:HSM_GROUP_NAME:_default' \
'--hsm-group=[hsm group name]:HSM_GROUP_NAME:_default' \
'-o+[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json table)' \
'--output=[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json table)' \
'-m[Only shows the most recent (equivalent to --limit 1)]' \
'--most-recent[Only shows the most recent (equivalent to --limit 1)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(cluster)
_arguments "${_arguments_options[@]}" : \
'-o+[Output format. If missing it will print output data in human readable (table) format]:FORMAT:(table table-wide json summary)' \
'--output=[Output format. If missing it will print output data in human readable (table) format]:FORMAT:(table table-wide json summary)' \
'-n[Prints nids in one line eg nidxxxxxx,nidyyyyyy,nidzzzzzz,...]' \
'--nids-only-one-line[Prints nids in one line eg nidxxxxxx,nidyyyyyy,nidzzzzzz,...]' \
'-x[Prints xnames in one line eg x1001c1s5b0n0,x1001c1s5b0n1,...]' \
'--xnames-only-one-line[Prints xnames in one line eg x1001c1s5b0n0,x1001c1s5b0n1,...]' \
'-s[Get cluster status\:  - OK\: All nodes are operational (booted and configured)  - OFF\: At least one node is OFF  - ON\: No nodes OFF and at least one is ON  - STANDBY\: At least one node'\''s heartbeat is lost  - UNCONFIGURED\: All nodes are READY but at least one of them is being configured  - FAILED\: At least one node configuration failed]' \
'--status[Get cluster status\:  - OK\: All nodes are operational (booted and configured)  - OFF\: At least one node is OFF  - ON\: No nodes OFF and at least one is ON  - STANDBY\: At least one node'\''s heartbeat is lost  - UNCONFIGURED\: All nodes are READY but at least one of them is being configured  - FAILED\: At least one node configuration failed]' \
'-h[Print help]' \
'--help[Print help]' \
':HSM_GROUP_NAME -- hsm group name:_default' \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
'-o+[Output format. If missing it will print output data in human readable (table) format]:FORMAT:(table table-wide json summary)' \
'--output=[Output format. If missing it will print output data in human readable (table) format]:FORMAT:(table table-wide json summary)' \
'-n[Prints nids in one line eg nidxxxxxx,nidyyyyyy,nidzzzzzz,...]' \
'--nids-only-one-line[Prints nids in one line eg nidxxxxxx,nidyyyyyy,nidzzzzzz,...]' \
'-s[Get cluster status\:  - OK\: All nodes are operational (booted and configured)  - OFF\: At least one node is OFF  - ON\: No nodes OFF and at least one is ON  - STANDBY\: At least one node'\''s heartbeat is lost  - UNCONFIGURED\: All nodes are READY but at least one of them is being configured  - FAILED\: At least one node configuration failed]' \
'--status[Get cluster status\:  - OK\: All nodes are operational (booted and configured)  - OFF\: At least one node is OFF  - ON\: No nodes OFF and at least one is ON  - STANDBY\: At least one node'\''s heartbeat is lost  - UNCONFIGURED\: All nodes are READY but at least one of them is being configured  - FAILED\: At least one node configuration failed]' \
'-S[Output includes extra nodes related to the ones requested by used. 2 nodes are siblings if they share the same power supply.]' \
'--include-siblings[Output includes extra nodes related to the ones requested by used. 2 nodes are siblings if they share the same power supply.]' \
'-r[Input nodes in regex format.]' \
'--regex[Input nodes in regex format.]' \
'-h[Print help]' \
'--help[Print help]' \
':XNAMES -- List of xnames or nids.
eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''
 Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'':_default' \
&& ret=0
;;
(hsm-groups)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':HSM_GROUP_NAME -- hsm group name:_default' \
&& ret=0
;;
(images)
_arguments "${_arguments_options[@]}" : \
'-i+[Image ID]:VALUE:_default' \
'--id=[Image ID]:VALUE:_default' \
'-l+[Filter records to the <VALUE> most common number of images created]:VALUE:_default' \
'--limit=[Filter records to the <VALUE> most common number of images created]:VALUE:_default' \
'-H+[hsm group name]:HSM_GROUP_NAME:_default' \
'--hsm-group=[hsm group name]:HSM_GROUP_NAME:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(kernel-parameters)
_arguments "${_arguments_options[@]}" : \
'-x+[Comma separated list of xnames to retreive the kernel parameters from. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\'']:VALUE:_default' \
'--xnames=[Comma separated list of xnames to retreive the kernel parameters from. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\'']:VALUE:_default' \
'-H+[List kernel parameters for all nodes in a HSM group name]:VALUE:_default' \
'--hsm-group=[List kernel parameters for all nodes in a HSM group name]:VALUE:_default' \
'-f+[Comma separated list of kernel parameters to filter. eg\: '\''console,bad_page,crashkernel,hugepagelist,root'\'']:VALUE:_default' \
'--filter=[Comma separated list of kernel parameters to filter. eg\: '\''console,bad_page,crashkernel,hugepagelist,root'\'']:VALUE:_default' \
'-o+[Output format.]:VALUE:(table json)' \
'--output=[Output format.]:VALUE:(table json)' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__get__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-get-help-command-$line[1]:"
        case $line[1] in
            (hw-component)
_arguments "${_arguments_options[@]}" : \
":: :_manta__get__help__hw-component_commands" \
"*::: :->hw-component" \
&& ret=0

    case $state in
    (hw-component)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-get-help-hw-component-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(sessions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(configurations)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(templates)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hsm-groups)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(images)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(kernel-parameters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(add)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__add_commands" \
"*::: :->add" \
&& ret=0

    case $state in
    (add)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-add-command-$line[1]:"
        case $line[1] in
            (hw-component)
_arguments "${_arguments_options[@]}" : \
'-P+[Pattern]:PATTERN:_default' \
'--pattern=[Pattern]:PATTERN:_default' \
'-t+[Target cluster name. This is the name of the cluster the pattern is applying to.]:TARGET_CLUSTER_NAME:_default' \
'--target-cluster=[Target cluster name. This is the name of the cluster the pattern is applying to.]:TARGET_CLUSTER_NAME:_default' \
'-p+[Parent cluster name. The parent cluster is the one offering and receiving resources from the target cluster.]:PARENT_CLUSTER_NAME:_default' \
'--parent-cluster=[Parent cluster name. The parent cluster is the one offering and receiving resources from the target cluster.]:PARENT_CLUSTER_NAME:_default' \
'-x[No dry-run, actually change the status of the system. The default for this command is a dry-run.]' \
'--no-dryrun[No dry-run, actually change the status of the system. The default for this command is a dry-run.]' \
'-c[If the target cluster name does not exist as HSM group, create it.]' \
'--create-hsm-group[If the target cluster name does not exist as HSM group, create it.]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(kernel-parameters)
_arguments "${_arguments_options[@]}" : \
'-x+[Comma separated list of nodes to set runtime configuration. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'']:XNAMES:_default' \
'--xnames=[Comma separated list of nodes to set runtime configuration. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'']:XNAMES:_default' \
'-H+[Cluster to set runtime configuration]:HSM_GROUP:_default' \
'--hsm-group=[Cluster to set runtime configuration]:HSM_GROUP:_default' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':VALUE -- Space separated list of kernel parameters. Eg\: console,bad_page,crashkernel,hugepagelist,quiet:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__add__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-add-help-command-$line[1]:"
        case $line[1] in
            (hw-component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(kernel-parameters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(apply)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__apply_commands" \
"*::: :->apply" \
&& ret=0

    case $state in
    (apply)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-command-$line[1]:"
        case $line[1] in
            (hw-configuration)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__apply__hw-configuration_commands" \
"*::: :->hw-configuration" \
&& ret=0

    case $state in
    (hw-configuration)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-hw-configuration-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
'-P+[Hw pattern with keywords to fuzzy find hardware componented to assign to the cluster like <hw component name>\:<hw component quantity>\[\:<hw component name>\:<hw component quantity>\]. Eg '\''a100\:12\:epic\:5'\'' will update the nodes assigned to cluster '\''zinal'\'' with 4 nodes\:  - 3 nodes with 4 Nvidia gpus A100 and 1 epyc AMD cpu each  - 1 node with 2 epyc AMD cpus]:VALUE:_default' \
'--pattern=[Hw pattern with keywords to fuzzy find hardware componented to assign to the cluster like <hw component name>\:<hw component quantity>\[\:<hw component name>\:<hw component quantity>\]. Eg '\''a100\:12\:epic\:5'\'' will update the nodes assigned to cluster '\''zinal'\'' with 4 nodes\:  - 3 nodes with 4 Nvidia gpus A100 and 1 epyc AMD cpu each  - 1 node with 2 epyc AMD cpus]:VALUE:_default' \
'-t+[Target cluster name. This is the name of the cluster the pattern is applying to.]:TARGET_CLUSTER_NAME:_default' \
'--target-cluster=[Target cluster name. This is the name of the cluster the pattern is applying to.]:TARGET_CLUSTER_NAME:_default' \
'-p+[Parent cluster name. The parent cluster is the one offering and receiving resources from the target cluster.]:PARENT_CLUSTER_NAME:_default' \
'--parent-cluster=[Parent cluster name. The parent cluster is the one offering and receiving resources from the target cluster.]:PARENT_CLUSTER_NAME:_default' \
'-x[No dry-run, actually change the status of the system. The default for this command is a dry-run.]' \
'--no-dryrun[No dry-run, actually change the status of the system. The default for this command is a dry-run.]' \
'-c[If the target cluster name does not exist as HSM group, create it.]' \
'--create-target-hsm-group[If the target cluster name does not exist as HSM group, create it.]' \
'-d[If the target HSM group is empty after this action, remove it.]' \
'--delete-empty-parent-hsm-group[If the target HSM group is empty after this action, remove it.]' \
'-u[It will try to get any nodes available.]' \
'--unpin-nodes[It will try to get any nodes available.]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__apply__hw-configuration__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-hw-configuration-help-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(configuration)
_arguments "${_arguments_options[@]}" : \
'-t+[SAT file with CFS configuration, CFS image and BOS session template details to create a cluster. The SAT file can be a jinja2 template, if this is the case, then a values file must be provided.]:SAT_FILE_PATH:_files' \
'--sat-template-file=[SAT file with CFS configuration, CFS image and BOS session template details to create a cluster. The SAT file can be a jinja2 template, if this is the case, then a values file must be provided.]:SAT_FILE_PATH:_files' \
'-f+[If the SAT file is a jinja2 template, then variables values can be expanded using this values file.]:VALUES_FILE_PATH:_files' \
'--values-file=[If the SAT file is a jinja2 template, then variables values can be expanded using this values file.]:VALUES_FILE_PATH:_files' \
'*-V+[If the SAT file is a jinja2 template, then variables values can be expanded using these values. Overwrites values-file if both provided.]:VALUES_PATH:_default' \
'*--values=[If the SAT file is a jinja2 template, then variables values can be expanded using these values. Overwrites values-file if both provided.]:VALUES_PATH:_default' \
'-o+[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json)' \
'--output=[Output format. If missing it will print output data in human redeable (table) format]:FORMAT:(json)' \
'-H+[hsm group name linked to this configuration]:HSM_GROUP_NAME:_default' \
'--hsm-group=[hsm group name linked to this configuration]:HSM_GROUP_NAME:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(sat-file)
_arguments "${_arguments_options[@]}" : \
'-t+[SAT file with CFS configuration, CFS image and BOS session template details to create a cluster. The SAT file can be a jinja2 template, if this is the case, then a values file must be provided.]:VALUE:_files' \
'--sat-template-file=[SAT file with CFS configuration, CFS image and BOS session template details to create a cluster. The SAT file can be a jinja2 template, if this is the case, then a values file must be provided.]:VALUE:_files' \
'-f+[If the SAT file is a jinja2 template, then variables values can be expanded using this values file.]:VALUE:_files' \
'--values-file=[If the SAT file is a jinja2 template, then variables values can be expanded using this values file.]:VALUE:_files' \
'*-V+[If the SAT file is a jinja2 template, then variables values can be expanded using these values. Overwrites values-file if both provided.]:VALUE:_default' \
'*--values=[If the SAT file is a jinja2 template, then variables values can be expanded using these values. Overwrites values-file if both provided.]:VALUE:_default' \
'-v+[Ansible verbosity. The verbose mode to use in the call to the ansible-playbook command. 1 = -v, 2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help for more information.]:VALUE:(1 2 3 4)' \
'--ansible-verbosity=[Ansible verbosity. The verbose mode to use in the call to the ansible-playbook command. 1 = -v, 2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help for more information.]:VALUE:(1 2 3 4)' \
'-P+[Additional parameters that are added to all Ansible calls for the session to create an image. This field is currently limited to the following Ansible parameters\: "--extra-vars", "--forks", "--skip-tags", "--start-at-task", and "--tags". WARNING\: Parameters passed to Ansible in this way should be used with caution. State will not be recorded for components when using these flags to avoid incorrect reporting of partial playbook runs.]:VALUE:_default' \
'--ansible-passthrough=[Additional parameters that are added to all Ansible calls for the session to create an image. This field is currently limited to the following Ansible parameters\: "--extra-vars", "--forks", "--skip-tags", "--start-at-task", and "--tags". WARNING\: Parameters passed to Ansible in this way should be used with caution. State will not be recorded for components when using these flags to avoid incorrect reporting of partial playbook runs.]:VALUE:_default' \
'-p+[Command to run before processing SAT file. If need to pass a command with params. Use " or '\''. eg\: --pre-hook "echo hello"]:SCRIPT:_default' \
'--pre-hook=[Command to run before processing SAT file. If need to pass a command with params. Use " or '\''. eg\: --pre-hook "echo hello"]:SCRIPT:_default' \
'-a+[Command to run immediately after processing SAT file successfully. Use " or '\''. eg\: --post-hook "echo hello".]:SCRIPT:_default' \
'--post-hook=[Command to run immediately after processing SAT file successfully. Use " or '\''. eg\: --post-hook "echo hello".]:SCRIPT:_default' \
'--do-not-reboot[By default, nodes will restart if SAT file builds an image which is assigned to the nodes through a BOS sessiontemplate, if you do not want to reboot the nodes, then use this flag. The SAT file will be processeed as usual and different elements created but the nodes won'\''t reboot. This means, you will have to run '\''manta apply template'\'' command with the sessoin_template created'\'']' \
'-w[Watch logs. Hooks stdout to see container running ansible scripts]' \
'--watch-logs[Watch logs. Hooks stdout to see container running ansible scripts]' \
'-i[Only process \`configurations\` and \`images\` sections in SAT file. The \`session_templates\` section will be ignored.]' \
'--image-only[Only process \`configurations\` and \`images\` sections in SAT file. The \`session_templates\` section will be ignored.]' \
'-s[Only process \`configurations\` and \`session_templates\` sections in SAT file. The \`images\` section will be ignored.]' \
'--sessiontemplate-only[Only process \`configurations\` and \`session_templates\` sections in SAT file. The \`images\` section will be ignored.]' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(boot)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__apply__boot_commands" \
"*::: :->boot" \
&& ret=0

    case $state in
    (boot)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-boot-command-$line[1]:"
        case $line[1] in
            (nodes)
_arguments "${_arguments_options[@]}" : \
'-i+[Image ID to boot the nodes]:IMAGE_ID:_default' \
'--boot-image=[Image ID to boot the nodes]:IMAGE_ID:_default' \
'-b+[CFS configuration name related to the image to boot the nodes. The most recent image id created using this configuration will be used to boot the nodes]:VALUE:_default' \
'--boot-image-configuration=[CFS configuration name related to the image to boot the nodes. The most recent image id created using this configuration will be used to boot the nodes]:VALUE:_default' \
'-r+[CFS configuration name to configure the nodes after booting]:VALUE:_default' \
'--runtime-configuration=[CFS configuration name to configure the nodes after booting]:VALUE:_default' \
'-k+[Kernel boot parameters to assign to the nodes while booting]:VALUE:_default' \
'--kernel-parameters=[Kernel boot parameters to assign to the nodes while booting]:VALUE:_default' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
':XNAMES -- Comma separated list of xnames which boot image will be updated.
eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'':_default' \
&& ret=0
;;
(cluster)
_arguments "${_arguments_options[@]}" : \
'-i+[Image ID to boot the nodes]:IMAGE_ID:_default' \
'--boot-image=[Image ID to boot the nodes]:IMAGE_ID:_default' \
'-b+[CFS configuration name related to the image to boot the nodes. The most recent image id created using this configuration will be used to boot the nodes]:VALUE:_default' \
'--boot-image-configuration=[CFS configuration name related to the image to boot the nodes. The most recent image id created using this configuration will be used to boot the nodes]:VALUE:_default' \
'-r+[CFS configuration name to configure the nodes after booting]:VALUE:_default' \
'--runtime-configuration=[CFS configuration name to configure the nodes after booting]:VALUE:_default' \
'-k+[Kernel boot parameters to assign to all cluster nodes while booting]:VALUE:_default' \
'--kernel-parameters=[Kernel boot parameters to assign to all cluster nodes while booting]:VALUE:_default' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
':CLUSTER_NAME -- Cluster name:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__apply__boot__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-boot-help-command-$line[1]:"
        case $line[1] in
            (nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(session)
_arguments "${_arguments_options[@]}" : \
'-n+[Session name]:VALUE:_default' \
'--name=[Session name]:VALUE:_default' \
'-p+[Playbook YAML file name. eg (site.yml)]:VALUE:_default' \
'--playbook-name=[Playbook YAML file name. eg (site.yml)]:VALUE:_default' \
'*-r+[Repo path. The path with a git repo and an ansible-playbook to configure the CFS image]:REPO_PATH:_files -/' \
'*--repo-path=[Repo path. The path with a git repo and an ansible-playbook to configure the CFS image]:REPO_PATH:_files -/' \
'-v+[Ansible verbosity. The verbose mode to use in the call to the ansible-playbook command. 1 = -v, 2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help for more information.]:VALUE:(0 1 2 3 4)' \
'--ansible-verbosity=[Ansible verbosity. The verbose mode to use in the call to the ansible-playbook command. 1 = -v, 2 = -vv, etc. Valid values range from 0 to 4. See the ansible-playbook help for more information.]:VALUE:(0 1 2 3 4)' \
'-P+[Additional parameters that are added to all Ansible calls for the session. This field is currently limited to the following Ansible parameters\: "--extra-vars", "--forks", "--skip-tags", "--start-at-task", and "--tags". WARNING\: Parameters passed to Ansible in this way should be used with caution. State will not be recorded for components when using these flags to avoid incorrect reporting of partial playbook runs.]:VALUE:_default' \
'--ansible-passthrough=[Additional parameters that are added to all Ansible calls for the session. This field is currently limited to the following Ansible parameters\: "--extra-vars", "--forks", "--skip-tags", "--start-at-task", and "--tags". WARNING\: Parameters passed to Ansible in this way should be used with caution. State will not be recorded for components when using these flags to avoid incorrect reporting of partial playbook runs.]:VALUE:_default' \
'-l+[Ansible limit. Target xnames to the CFS session. Note\: ansible-limit must be a subset of hsm-group if both parameters are provided]:VALUE:_default' \
'--ansible-limit=[Ansible limit. Target xnames to the CFS session. Note\: ansible-limit must be a subset of hsm-group if both parameters are provided]:VALUE:_default' \
'-H+[hsm group name]:HSM_GROUP_NAME:_default' \
'--hsm-group=[hsm group name]:HSM_GROUP_NAME:_default' \
'-w[Watch logs. Hooks stdout to see container running ansible scripts]' \
'--watch-logs[Watch logs. Hooks stdout to see container running ansible scripts]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(ephemeral-environment)
_arguments "${_arguments_options[@]}" : \
'-i+[Image ID to use as a container image]:IMAGE_ID:_default' \
'--image-id=[Image ID to use as a container image]:IMAGE_ID:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(template)
_arguments "${_arguments_options[@]}" : \
'-n+[Name of the Session]:VALUE:_default' \
'--name=[Name of the Session]:VALUE:_default' \
'-o+[An operation to perform on Components in this Session. Boot Applies the Template to the Components and boots/reboots if necessary. Reboot Applies the Template to the Components; guarantees a reboot. Shutdown Power down Components that are on]:VALUE:(reboot boot shutdown)' \
'--operation=[An operation to perform on Components in this Session. Boot Applies the Template to the Components and boots/reboots if necessary. Reboot Applies the Template to the Components; guarantees a reboot. Shutdown Power down Components that are on]:VALUE:(reboot boot shutdown)' \
'-t+[Name of the Session Template]:VALUE:_default' \
'--template=[Name of the Session Template]:VALUE:_default' \
'-l+[A comma-separated list of nodes, groups, or roles to which the Session will be limited. Components are treated as OR operations unless preceded by '\''&'\'' for AND or '\''!'\'' for NOT]:VALUE:_default' \
'--limit=[A comma-separated list of nodes, groups, or roles to which the Session will be limited. Components are treated as OR operations unless preceded by '\''&'\'' for AND or '\''!'\'' for NOT]:VALUE:_default' \
'-i[Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM)]' \
'--include-disabled[Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM)]' \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__apply__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-help-command-$line[1]:"
        case $line[1] in
            (hw-configuration)
_arguments "${_arguments_options[@]}" : \
":: :_manta__apply__help__hw-configuration_commands" \
"*::: :->hw-configuration" \
&& ret=0

    case $state in
    (hw-configuration)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-help-hw-configuration-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(configuration)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sat-file)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(boot)
_arguments "${_arguments_options[@]}" : \
":: :_manta__apply__help__boot_commands" \
"*::: :->boot" \
&& ret=0

    case $state in
    (boot)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-apply-help-boot-command-$line[1]:"
        case $line[1] in
            (nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(session)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(ephemeral-environment)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(template)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(delete)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__delete_commands" \
"*::: :->delete" \
&& ret=0

    case $state in
    (delete)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-delete-command-$line[1]:"
        case $line[1] in
            (kernel-parameters)
_arguments "${_arguments_options[@]}" : \
'-x+[Comma separated list of nodes to set runtime configuration. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'']:XNAMES:_default' \
'--xnames=[Comma separated list of nodes to set runtime configuration. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'']:XNAMES:_default' \
'-H+[Cluster to set runtime configuration]:HSM_GROUP:_default' \
'--hsm-group=[Cluster to set runtime configuration]:HSM_GROUP:_default' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':VALUE -- Space separated list of kernel parameters. Eg\: console,bad_page,crashkernel,hugepagelist,quiet:_default' \
&& ret=0
;;
(session)
_arguments "${_arguments_options[@]}" : \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
':SESSION_NAME -- Session name to delete:_default' \
&& ret=0
;;
(images)
_arguments "${_arguments_options[@]}" : \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
':IMAGE_LIST -- Comma separated list of image ids to delete/
eg\: e2ce82f0-e7ba-4f36-9f5c-750346599600,59e0180a-3fdd-4936-bba7-14ba914ffd34:_default' \
&& ret=0
;;
(hw-component)
_arguments "${_arguments_options[@]}" : \
'-P+[Pattern]:PATTERN:_default' \
'--pattern=[Pattern]:PATTERN:_default' \
'-t+[Target cluster name. This is the name of the cluster the pattern is applying to (resources move from here).]:TARGET_CLUSTER_NAME:_default' \
'--target-cluster=[Target cluster name. This is the name of the cluster the pattern is applying to (resources move from here).]:TARGET_CLUSTER_NAME:_default' \
'-p+[Parent cluster name. The parent cluster is the one receiving resources from the target cluster (resources move here).]:PARENT_CLUSTER_NAME:_default' \
'--parent-cluster=[Parent cluster name. The parent cluster is the one receiving resources from the target cluster (resources move here).]:PARENT_CLUSTER_NAME:_default' \
'-x[No dry-run, actually change the status of the system. The default for this command is a dry-run.]' \
'--no-dryrun[No dry-run, actually change the status of the system. The default for this command is a dry-run.]' \
'-d[Delete the HSM group if empty after this action.]' \
'--delete-hsm-group[Delete the HSM group if empty after this action.]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__delete__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-delete-help-command-$line[1]:"
        case $line[1] in
            (kernel-parameters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(session)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(images)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hw-component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(migrate)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__migrate_commands" \
"*::: :->migrate" \
&& ret=0

    case $state in
    (migrate)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-migrate-command-$line[1]:"
        case $line[1] in
            (vCluster)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__migrate__vCluster_commands" \
"*::: :->vCluster" \
&& ret=0

    case $state in
    (vCluster)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-migrate-vCluster-command-$line[1]:"
        case $line[1] in
            (backup)
_arguments "${_arguments_options[@]}" : \
'-b+[BOS Sessiontemplate to use to derive CFS, boot parameters and HSM group]:SESSIONTEMPLATE:_default' \
'--bos=[BOS Sessiontemplate to use to derive CFS, boot parameters and HSM group]:SESSIONTEMPLATE:_default' \
'-d+[Destination folder to store the backup on]:FOLDER:_default' \
'--destination=[Destination folder to store the backup on]:FOLDER:_default' \
'-p+[Command to run before doing the backup. If need to pass a command with params. Use " or '\''. eg\: --pre-hook "echo hello"]:SCRIPT:_default' \
'--pre-hook=[Command to run before doing the backup. If need to pass a command with params. Use " or '\''. eg\: --pre-hook "echo hello"]:SCRIPT:_default' \
'-a+[Command to run immediately after the backup is completed successfully. Use " or '\''. eg\: --post-hook "echo hello".]:SCRIPT:_default' \
'--post-hook=[Command to run immediately after the backup is completed successfully. Use " or '\''. eg\: --post-hook "echo hello".]:SCRIPT:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(restore)
_arguments "${_arguments_options[@]}" : \
'-b+[BOS session template of the cluster backed previously with migrate backup]:BOS_session_template_file:_files' \
'--bos-file=[BOS session template of the cluster backed previously with migrate backup]:BOS_session_template_file:_files' \
'-c+[CFS session template of the cluster backed previously with migrate backup]:CFS_configuration_file:_files' \
'--cfs-file=[CFS session template of the cluster backed previously with migrate backup]:CFS_configuration_file:_files' \
'-j+[HSM group description file of the cluster backed previously with migrate backup]:HSM_group_description_file:_files' \
'--hsm-file=[HSM group description file of the cluster backed previously with migrate backup]:HSM_group_description_file:_files' \
'-m+[IMS file backed previously with migrate backup]:IMS_file:_files' \
'--ims-file=[IMS file backed previously with migrate backup]:IMS_file:_files' \
'-i+[Path where the image files are stored.]:IMAGE_path:_files -/' \
'--image-dir=[Path where the image files are stored.]:IMAGE_path:_files -/' \
'-p+[Command to run before doing the backup. If need to pass a command with params. Use " or '\''. eg\: --pre-hook "echo hello"]:SCRIPT:_default' \
'--pre-hook=[Command to run before doing the backup. If need to pass a command with params. Use " or '\''. eg\: --pre-hook "echo hello"]:SCRIPT:_default' \
'-a+[Command to run immediately after the backup is completed successfully. Use " or '\''. eg\: --pre-hook "echo hello".]:SCRIPT:_default' \
'--post-hook=[Command to run immediately after the backup is completed successfully. Use " or '\''. eg\: --pre-hook "echo hello".]:SCRIPT:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__migrate__vCluster__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-migrate-vCluster-help-command-$line[1]:"
        case $line[1] in
            (backup)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(restore)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
'-f+[The name of the source vCluster from which the compute nodes will be moved.]:VALUE:_default' \
'--from=[The name of the source vCluster from which the compute nodes will be moved.]:VALUE:_default' \
'-t+[The name of the target vCluster to which the compute nodes will be moved.]:VALUE:_default' \
'--to=[The name of the target vCluster to which the compute nodes will be moved.]:VALUE:_default' \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
':XNAMES -- Comma separated list of xnames to add to a cluster.
eg\: '\''x1003c1s7b0n0,x1003c1s7b0n1,x1003c1s7b1n0'\'':_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__migrate__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-migrate-help-command-$line[1]:"
        case $line[1] in
            (vCluster)
_arguments "${_arguments_options[@]}" : \
":: :_manta__migrate__help__vCluster_commands" \
"*::: :->vCluster" \
&& ret=0

    case $state in
    (vCluster)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-migrate-help-vCluster-command-$line[1]:"
        case $line[1] in
            (backup)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(restore)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(power)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__power_commands" \
"*::: :->power" \
&& ret=0

    case $state in
    (power)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-command-$line[1]:"
        case $line[1] in
            (on)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__power__on_commands" \
"*::: :->on" \
&& ret=0

    case $state in
    (on)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-on-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
'-R+[reason to power on]:TEXT:_default' \
'--reason=[reason to power on]:TEXT:_default' \
'-o+[Output format.]:FORMAT:(table json)' \
'--output=[Output format.]:FORMAT:(table json)' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':CLUSTER_NAME -- Cluster name:_default' \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
'-o+[Output format.]:FORMAT:(table json)' \
'--output=[Output format.]:FORMAT:(table json)' \
'-r[Input nodes in regex format.]' \
'--regex[Input nodes in regex format.]' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':VALUE -- List of xnames or nids.
eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''
 Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'':_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__power__on__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-on-help-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(off)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__power__off_commands" \
"*::: :->off" \
&& ret=0

    case $state in
    (off)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-off-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
'-R+[reason to power off]:TEXT:_default' \
'--reason=[reason to power off]:TEXT:_default' \
'-o+[Output format.]:FORMAT:(table json)' \
'--output=[Output format.]:FORMAT:(table json)' \
'-f[force]' \
'--force[force]' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':CLUSTER_NAME -- Cluster name:_default' \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
'-n+[Comma separated list of nodes]:VALUE:_default' \
'--nodes=[Comma separated list of nodes]:VALUE:_default' \
'-o+[Output format.]:FORMAT:(table json)' \
'--output=[Output format.]:FORMAT:(table json)' \
'-r[Input nodes in regex format. eg '\''x1003c1s.*'\'']' \
'--regex[Input nodes in regex format. eg '\''x1003c1s.*'\'']' \
'-f[force]' \
'--force[force]' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':VALUE -- List of xnames or nids.
eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''
 Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'':_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__power__off__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-off-help-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(reset)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__power__reset_commands" \
"*::: :->reset" \
&& ret=0

    case $state in
    (reset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-reset-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
'-o+[Output format.]:FORMAT:(table json)' \
'--output=[Output format.]:FORMAT:(table json)' \
'-r+[reason to power reset]:TEXT:_default' \
'--reason=[reason to power reset]:TEXT:_default' \
'-f[force]' \
'--force[force]' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':CLUSTER_NAME -- Cluster name:_default' \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
'-o+[Output format.]:FORMAT:(table json)' \
'--output=[Output format.]:FORMAT:(table json)' \
'-r[Input nodes in regex format.]' \
'--regex[Input nodes in regex format.]' \
'-f[force]' \
'--force[force]' \
'-y[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'--assume-yes[Automatic yes to prompts; assume '\''yes'\'' as answer to all prompts and run non-interactively.]' \
'-h[Print help]' \
'--help[Print help]' \
':VALUE -- List of xnames or nids.
eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''
 Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'':_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__power__reset__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-reset-help-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__power__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-help-command-$line[1]:"
        case $line[1] in
            (on)
_arguments "${_arguments_options[@]}" : \
":: :_manta__power__help__on_commands" \
"*::: :->on" \
&& ret=0

    case $state in
    (on)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-help-on-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(off)
_arguments "${_arguments_options[@]}" : \
":: :_manta__power__help__off_commands" \
"*::: :->off" \
&& ret=0

    case $state in
    (off)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-help-off-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(reset)
_arguments "${_arguments_options[@]}" : \
":: :_manta__power__help__reset_commands" \
"*::: :->reset" \
&& ret=0

    case $state in
    (reset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-power-help-reset-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(log)
_arguments "${_arguments_options[@]}" : \
'-c+[Show logs most recent CFS session logs created for cluster.]:CLUSTERNAME:_default' \
'--cluster=[Show logs most recent CFS session logs created for cluster.]:CLUSTERNAME:_default' \
'-n+[Show logs most recent CFS session logs created for a node.]:NODENAME:_default' \
'--node=[Show logs most recent CFS session logs created for a node.]:NODENAME:_default' \
'-h[Print help]' \
'--help[Print help]' \
'::SESSION_NAME -- show logs related to session name:_default' \
&& ret=0
;;
(console)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_manta__console_commands" \
"*::: :->console" \
&& ret=0

    case $state in
    (console)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-console-command-$line[1]:"
        case $line[1] in
            (node)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':XNAME -- node xname:_default' \
&& ret=0
;;
(target-ansible)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':SESSION_NAME -- CFS session name:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__console__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-console-help-command-$line[1]:"
        case $line[1] in
            (node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(target-ansible)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(validate-local-repo)
_arguments "${_arguments_options[@]}" : \
'*-r+[Repo path. The path to a local a git repo related to a CFS configuration layer to test against Gitea]:REPO_PATH:_default' \
'*--repo-path=[Repo path. The path to a local a git repo related to a CFS configuration layer to test against Gitea]:REPO_PATH:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(add-nodes-to-groups)
_arguments "${_arguments_options[@]}" : \
'-g+[HSM group to assign the nodes to]:VALUE:_default' \
'--group=[HSM group to assign the nodes to]:VALUE:_default' \
'-n+[List of xnames or nids. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''  Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'']:VALUE:_default' \
'--nodes=[List of xnames or nids. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''  Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'']:VALUE:_default' \
'-r[Input nodes in regex format.]' \
'--regex[Input nodes in regex format.]' \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(remove-nodes-from-groups)
_arguments "${_arguments_options[@]}" : \
'-g+[HSM group to remove the nodes from]:VALUE:_default' \
'--group=[HSM group to remove the nodes from]:VALUE:_default' \
'-n+[List of xnames or nids. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''  Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'']:VALUE:_default' \
'--nodes=[List of xnames or nids. eg '\''x1003c1s7b0n0,1003c1s7b0n1,x1003c1s7b1n0'\'' or '\''nid001313,nid001314'\''  Host list also accepted eg '\''x1003c1s7b0n\[0-1\],x1003c1s7b1n0'\'' or '\''nid00131\[0-9\]'\'']:VALUE:_default' \
'-r[Input nodes in regex format.]' \
'--regex[Input nodes in regex format.]' \
'-d[Simulates the execution of the command without making any actual changes.]' \
'--dry-run[Simulates the execution of the command without making any actual changes.]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-command-$line[1]:"
        case $line[1] in
            (config)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-config-command-$line[1]:"
        case $line[1] in
            (show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(set)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__config__set_commands" \
"*::: :->set" \
&& ret=0

    case $state in
    (set)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-config-set-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(site)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(log)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(unset)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__config__unset_commands" \
"*::: :->unset" \
&& ret=0

    case $state in
    (unset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-config-unset-command-$line[1]:"
        case $line[1] in
            (hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(parent-hsm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(auth)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(generate-autocomplete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(get)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-get-command-$line[1]:"
        case $line[1] in
            (hw-component)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__get__hw-component_commands" \
"*::: :->hw-component" \
&& ret=0

    case $state in
    (hw-component)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-get-hw-component-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(sessions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(configurations)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(templates)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hsm-groups)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(images)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(kernel-parameters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(add)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__add_commands" \
"*::: :->add" \
&& ret=0

    case $state in
    (add)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-add-command-$line[1]:"
        case $line[1] in
            (hw-component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(kernel-parameters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(apply)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__apply_commands" \
"*::: :->apply" \
&& ret=0

    case $state in
    (apply)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-apply-command-$line[1]:"
        case $line[1] in
            (hw-configuration)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__apply__hw-configuration_commands" \
"*::: :->hw-configuration" \
&& ret=0

    case $state in
    (hw-configuration)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-apply-hw-configuration-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(configuration)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sat-file)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(boot)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__apply__boot_commands" \
"*::: :->boot" \
&& ret=0

    case $state in
    (boot)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-apply-boot-command-$line[1]:"
        case $line[1] in
            (nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(session)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(ephemeral-environment)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(template)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(delete)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__delete_commands" \
"*::: :->delete" \
&& ret=0

    case $state in
    (delete)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-delete-command-$line[1]:"
        case $line[1] in
            (kernel-parameters)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(session)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(images)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hw-component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(migrate)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__migrate_commands" \
"*::: :->migrate" \
&& ret=0

    case $state in
    (migrate)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-migrate-command-$line[1]:"
        case $line[1] in
            (vCluster)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__migrate__vCluster_commands" \
"*::: :->vCluster" \
&& ret=0

    case $state in
    (vCluster)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-migrate-vCluster-command-$line[1]:"
        case $line[1] in
            (backup)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(restore)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(power)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__power_commands" \
"*::: :->power" \
&& ret=0

    case $state in
    (power)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-power-command-$line[1]:"
        case $line[1] in
            (on)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__power__on_commands" \
"*::: :->on" \
&& ret=0

    case $state in
    (on)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-power-on-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(off)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__power__off_commands" \
"*::: :->off" \
&& ret=0

    case $state in
    (off)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-power-off-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(reset)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__power__reset_commands" \
"*::: :->reset" \
&& ret=0

    case $state in
    (reset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-power-reset-command-$line[1]:"
        case $line[1] in
            (cluster)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(nodes)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(log)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(console)
_arguments "${_arguments_options[@]}" : \
":: :_manta__help__console_commands" \
"*::: :->console" \
&& ret=0

    case $state in
    (console)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:manta-help-console-command-$line[1]:"
        case $line[1] in
            (node)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(target-ansible)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(validate-local-repo)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(add-nodes-to-groups)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(remove-nodes-from-groups)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_manta_commands] )) ||
_manta_commands() {
    local commands; commands=(
'config:Manta'\''s configuration' \
'get:Get information from CSM system' \
'add:Add hw components to cluster' \
'apply:Make changes to Shasta system' \
'delete:Deletes data' \
'migrate:' \
'power:Command to submit commands related to cluster/node power management' \
'log:get cfs session logs' \
'console:Opens an interective session to a node or CFS session ansible target container' \
'validate-local-repo:Check all tags and HEAD information related to a local repo exists in Gitea' \
'add-nodes-to-groups:Add nodes to a list of groups' \
'remove-nodes-from-groups:Remove nodes from groups' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta commands' commands "$@"
}
(( $+functions[_manta__add_commands] )) ||
_manta__add_commands() {
    local commands; commands=(
'hw-component:WIP - Add hw components from a cluster' \
'kernel-parameters:Delete kernel parameters' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta add commands' commands "$@"
}
(( $+functions[_manta__add__help_commands] )) ||
_manta__add__help_commands() {
    local commands; commands=(
'hw-component:WIP - Add hw components from a cluster' \
'kernel-parameters:Delete kernel parameters' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta add help commands' commands "$@"
}
(( $+functions[_manta__add__help__help_commands] )) ||
_manta__add__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta add help help commands' commands "$@"
}
(( $+functions[_manta__add__help__hw-component_commands] )) ||
_manta__add__help__hw-component_commands() {
    local commands; commands=()
    _describe -t commands 'manta add help hw-component commands' commands "$@"
}
(( $+functions[_manta__add__help__kernel-parameters_commands] )) ||
_manta__add__help__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta add help kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__add__hw-component_commands] )) ||
_manta__add__hw-component_commands() {
    local commands; commands=()
    _describe -t commands 'manta add hw-component commands' commands "$@"
}
(( $+functions[_manta__add__kernel-parameters_commands] )) ||
_manta__add__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta add kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__add-nodes-to-groups_commands] )) ||
_manta__add-nodes-to-groups_commands() {
    local commands; commands=()
    _describe -t commands 'manta add-nodes-to-groups commands' commands "$@"
}
(( $+functions[_manta__apply_commands] )) ||
_manta__apply_commands() {
    local commands; commands=(
'hw-configuration:WIP - Upscale/downscale hw components in a cluster based on user input pattern. If the cluster does not exists, then a new one will be created, otherwise, the nodes of the existing cluster will be changed according to the new configuration' \
'configuration:DEPRECATED - Please use '\''manta apply sat-file'\'' command instead. Create a CFS configuration' \
'sat-file:Process a SAT file and creates the configurations, images, boot parameters and runtime configurations. If runtime configuration and boot parameters are defined, then, reboots the nodes to configure. The ansible container for the session building the image will remain running after an Ansible failure.  The container will remain running for a number of seconds specified by the '\''debug_wait_time options'\''' \
'boot:Change boot operations' \
'session:Runs the ansible script in local directory against HSM group or xnames. Note\: the local repo must alrady exists in Shasta VCS' \
'ephemeral-environment:Returns a hostname use can ssh with the image ID provided. This call is async which means, the user will have to wait a few seconds for the environment to be ready, normally, this takes a few seconds.' \
'template:Create a new BOS session from an existing BOS sessiontemplate' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta apply commands' commands "$@"
}
(( $+functions[_manta__apply__boot_commands] )) ||
_manta__apply__boot_commands() {
    local commands; commands=(
'nodes:Update the boot parameters (boot image id, runtime configuration and kernel parameters) for a list of nodes. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot nodes --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
'cluster:Update the boot parameters (boot image id, runtime configuration and kernel params) for all nodes in a cluster. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot cluster --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta apply boot commands' commands "$@"
}
(( $+functions[_manta__apply__boot__cluster_commands] )) ||
_manta__apply__boot__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply boot cluster commands' commands "$@"
}
(( $+functions[_manta__apply__boot__help_commands] )) ||
_manta__apply__boot__help_commands() {
    local commands; commands=(
'nodes:Update the boot parameters (boot image id, runtime configuration and kernel parameters) for a list of nodes. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot nodes --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
'cluster:Update the boot parameters (boot image id, runtime configuration and kernel params) for all nodes in a cluster. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot cluster --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta apply boot help commands' commands "$@"
}
(( $+functions[_manta__apply__boot__help__cluster_commands] )) ||
_manta__apply__boot__help__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply boot help cluster commands' commands "$@"
}
(( $+functions[_manta__apply__boot__help__help_commands] )) ||
_manta__apply__boot__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply boot help help commands' commands "$@"
}
(( $+functions[_manta__apply__boot__help__nodes_commands] )) ||
_manta__apply__boot__help__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply boot help nodes commands' commands "$@"
}
(( $+functions[_manta__apply__boot__nodes_commands] )) ||
_manta__apply__boot__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply boot nodes commands' commands "$@"
}
(( $+functions[_manta__apply__configuration_commands] )) ||
_manta__apply__configuration_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply configuration commands' commands "$@"
}
(( $+functions[_manta__apply__ephemeral-environment_commands] )) ||
_manta__apply__ephemeral-environment_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply ephemeral-environment commands' commands "$@"
}
(( $+functions[_manta__apply__help_commands] )) ||
_manta__apply__help_commands() {
    local commands; commands=(
'hw-configuration:WIP - Upscale/downscale hw components in a cluster based on user input pattern. If the cluster does not exists, then a new one will be created, otherwise, the nodes of the existing cluster will be changed according to the new configuration' \
'configuration:DEPRECATED - Please use '\''manta apply sat-file'\'' command instead. Create a CFS configuration' \
'sat-file:Process a SAT file and creates the configurations, images, boot parameters and runtime configurations. If runtime configuration and boot parameters are defined, then, reboots the nodes to configure. The ansible container for the session building the image will remain running after an Ansible failure.  The container will remain running for a number of seconds specified by the '\''debug_wait_time options'\''' \
'boot:Change boot operations' \
'session:Runs the ansible script in local directory against HSM group or xnames. Note\: the local repo must alrady exists in Shasta VCS' \
'ephemeral-environment:Returns a hostname use can ssh with the image ID provided. This call is async which means, the user will have to wait a few seconds for the environment to be ready, normally, this takes a few seconds.' \
'template:Create a new BOS session from an existing BOS sessiontemplate' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta apply help commands' commands "$@"
}
(( $+functions[_manta__apply__help__boot_commands] )) ||
_manta__apply__help__boot_commands() {
    local commands; commands=(
'nodes:Update the boot parameters (boot image id, runtime configuration and kernel parameters) for a list of nodes. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot nodes --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
'cluster:Update the boot parameters (boot image id, runtime configuration and kernel params) for all nodes in a cluster. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot cluster --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
    )
    _describe -t commands 'manta apply help boot commands' commands "$@"
}
(( $+functions[_manta__apply__help__boot__cluster_commands] )) ||
_manta__apply__help__boot__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help boot cluster commands' commands "$@"
}
(( $+functions[_manta__apply__help__boot__nodes_commands] )) ||
_manta__apply__help__boot__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help boot nodes commands' commands "$@"
}
(( $+functions[_manta__apply__help__configuration_commands] )) ||
_manta__apply__help__configuration_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help configuration commands' commands "$@"
}
(( $+functions[_manta__apply__help__ephemeral-environment_commands] )) ||
_manta__apply__help__ephemeral-environment_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help ephemeral-environment commands' commands "$@"
}
(( $+functions[_manta__apply__help__help_commands] )) ||
_manta__apply__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help help commands' commands "$@"
}
(( $+functions[_manta__apply__help__hw-configuration_commands] )) ||
_manta__apply__help__hw-configuration_commands() {
    local commands; commands=(
'cluster:WIP - Upscale/downscale hw components in a cluster based on user input pattern. If the cluster does not exists, then a new one will be created, otherwise, the nodes of the existing cluster will be changed according to the new configuration' \
    )
    _describe -t commands 'manta apply help hw-configuration commands' commands "$@"
}
(( $+functions[_manta__apply__help__hw-configuration__cluster_commands] )) ||
_manta__apply__help__hw-configuration__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help hw-configuration cluster commands' commands "$@"
}
(( $+functions[_manta__apply__help__sat-file_commands] )) ||
_manta__apply__help__sat-file_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help sat-file commands' commands "$@"
}
(( $+functions[_manta__apply__help__session_commands] )) ||
_manta__apply__help__session_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help session commands' commands "$@"
}
(( $+functions[_manta__apply__help__template_commands] )) ||
_manta__apply__help__template_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply help template commands' commands "$@"
}
(( $+functions[_manta__apply__hw-configuration_commands] )) ||
_manta__apply__hw-configuration_commands() {
    local commands; commands=(
'cluster:WIP - Upscale/downscale hw components in a cluster based on user input pattern. If the cluster does not exists, then a new one will be created, otherwise, the nodes of the existing cluster will be changed according to the new configuration' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta apply hw-configuration commands' commands "$@"
}
(( $+functions[_manta__apply__hw-configuration__cluster_commands] )) ||
_manta__apply__hw-configuration__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply hw-configuration cluster commands' commands "$@"
}
(( $+functions[_manta__apply__hw-configuration__help_commands] )) ||
_manta__apply__hw-configuration__help_commands() {
    local commands; commands=(
'cluster:WIP - Upscale/downscale hw components in a cluster based on user input pattern. If the cluster does not exists, then a new one will be created, otherwise, the nodes of the existing cluster will be changed according to the new configuration' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta apply hw-configuration help commands' commands "$@"
}
(( $+functions[_manta__apply__hw-configuration__help__cluster_commands] )) ||
_manta__apply__hw-configuration__help__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply hw-configuration help cluster commands' commands "$@"
}
(( $+functions[_manta__apply__hw-configuration__help__help_commands] )) ||
_manta__apply__hw-configuration__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply hw-configuration help help commands' commands "$@"
}
(( $+functions[_manta__apply__sat-file_commands] )) ||
_manta__apply__sat-file_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply sat-file commands' commands "$@"
}
(( $+functions[_manta__apply__session_commands] )) ||
_manta__apply__session_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply session commands' commands "$@"
}
(( $+functions[_manta__apply__template_commands] )) ||
_manta__apply__template_commands() {
    local commands; commands=()
    _describe -t commands 'manta apply template commands' commands "$@"
}
(( $+functions[_manta__config_commands] )) ||
_manta__config_commands() {
    local commands; commands=(
'show:Show config values' \
'set:Change config values' \
'unset:Reset config values' \
'generate-autocomplete:Generate shell auto completion script' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta config commands' commands "$@"
}
(( $+functions[_manta__config__generate-autocomplete_commands] )) ||
_manta__config__generate-autocomplete_commands() {
    local commands; commands=()
    _describe -t commands 'manta config generate-autocomplete commands' commands "$@"
}
(( $+functions[_manta__config__help_commands] )) ||
_manta__config__help_commands() {
    local commands; commands=(
'show:Show config values' \
'set:Change config values' \
'unset:Reset config values' \
'generate-autocomplete:Generate shell auto completion script' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta config help commands' commands "$@"
}
(( $+functions[_manta__config__help__generate-autocomplete_commands] )) ||
_manta__config__help__generate-autocomplete_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help generate-autocomplete commands' commands "$@"
}
(( $+functions[_manta__config__help__help_commands] )) ||
_manta__config__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help help commands' commands "$@"
}
(( $+functions[_manta__config__help__set_commands] )) ||
_manta__config__help__set_commands() {
    local commands; commands=(
'hsm:Set target HSM group' \
'parent-hsm:Set parent HSM group' \
'site:Set site to work on' \
'log:Set site to work on' \
    )
    _describe -t commands 'manta config help set commands' commands "$@"
}
(( $+functions[_manta__config__help__set__hsm_commands] )) ||
_manta__config__help__set__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help set hsm commands' commands "$@"
}
(( $+functions[_manta__config__help__set__log_commands] )) ||
_manta__config__help__set__log_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help set log commands' commands "$@"
}
(( $+functions[_manta__config__help__set__parent-hsm_commands] )) ||
_manta__config__help__set__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help set parent-hsm commands' commands "$@"
}
(( $+functions[_manta__config__help__set__site_commands] )) ||
_manta__config__help__set__site_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help set site commands' commands "$@"
}
(( $+functions[_manta__config__help__show_commands] )) ||
_manta__config__help__show_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help show commands' commands "$@"
}
(( $+functions[_manta__config__help__unset_commands] )) ||
_manta__config__help__unset_commands() {
    local commands; commands=(
'hsm:Unset target HSM group' \
'parent-hsm:Unset parent HSM group' \
'auth:Unset authentication token' \
    )
    _describe -t commands 'manta config help unset commands' commands "$@"
}
(( $+functions[_manta__config__help__unset__auth_commands] )) ||
_manta__config__help__unset__auth_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help unset auth commands' commands "$@"
}
(( $+functions[_manta__config__help__unset__hsm_commands] )) ||
_manta__config__help__unset__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help unset hsm commands' commands "$@"
}
(( $+functions[_manta__config__help__unset__parent-hsm_commands] )) ||
_manta__config__help__unset__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config help unset parent-hsm commands' commands "$@"
}
(( $+functions[_manta__config__set_commands] )) ||
_manta__config__set_commands() {
    local commands; commands=(
'hsm:Set target HSM group' \
'parent-hsm:Set parent HSM group' \
'site:Set site to work on' \
'log:Set site to work on' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta config set commands' commands "$@"
}
(( $+functions[_manta__config__set__help_commands] )) ||
_manta__config__set__help_commands() {
    local commands; commands=(
'hsm:Set target HSM group' \
'parent-hsm:Set parent HSM group' \
'site:Set site to work on' \
'log:Set site to work on' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta config set help commands' commands "$@"
}
(( $+functions[_manta__config__set__help__help_commands] )) ||
_manta__config__set__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set help help commands' commands "$@"
}
(( $+functions[_manta__config__set__help__hsm_commands] )) ||
_manta__config__set__help__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set help hsm commands' commands "$@"
}
(( $+functions[_manta__config__set__help__log_commands] )) ||
_manta__config__set__help__log_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set help log commands' commands "$@"
}
(( $+functions[_manta__config__set__help__parent-hsm_commands] )) ||
_manta__config__set__help__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set help parent-hsm commands' commands "$@"
}
(( $+functions[_manta__config__set__help__site_commands] )) ||
_manta__config__set__help__site_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set help site commands' commands "$@"
}
(( $+functions[_manta__config__set__hsm_commands] )) ||
_manta__config__set__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set hsm commands' commands "$@"
}
(( $+functions[_manta__config__set__log_commands] )) ||
_manta__config__set__log_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set log commands' commands "$@"
}
(( $+functions[_manta__config__set__parent-hsm_commands] )) ||
_manta__config__set__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set parent-hsm commands' commands "$@"
}
(( $+functions[_manta__config__set__site_commands] )) ||
_manta__config__set__site_commands() {
    local commands; commands=()
    _describe -t commands 'manta config set site commands' commands "$@"
}
(( $+functions[_manta__config__show_commands] )) ||
_manta__config__show_commands() {
    local commands; commands=()
    _describe -t commands 'manta config show commands' commands "$@"
}
(( $+functions[_manta__config__unset_commands] )) ||
_manta__config__unset_commands() {
    local commands; commands=(
'hsm:Unset target HSM group' \
'parent-hsm:Unset parent HSM group' \
'auth:Unset authentication token' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta config unset commands' commands "$@"
}
(( $+functions[_manta__config__unset__auth_commands] )) ||
_manta__config__unset__auth_commands() {
    local commands; commands=()
    _describe -t commands 'manta config unset auth commands' commands "$@"
}
(( $+functions[_manta__config__unset__help_commands] )) ||
_manta__config__unset__help_commands() {
    local commands; commands=(
'hsm:Unset target HSM group' \
'parent-hsm:Unset parent HSM group' \
'auth:Unset authentication token' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta config unset help commands' commands "$@"
}
(( $+functions[_manta__config__unset__help__auth_commands] )) ||
_manta__config__unset__help__auth_commands() {
    local commands; commands=()
    _describe -t commands 'manta config unset help auth commands' commands "$@"
}
(( $+functions[_manta__config__unset__help__help_commands] )) ||
_manta__config__unset__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta config unset help help commands' commands "$@"
}
(( $+functions[_manta__config__unset__help__hsm_commands] )) ||
_manta__config__unset__help__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config unset help hsm commands' commands "$@"
}
(( $+functions[_manta__config__unset__help__parent-hsm_commands] )) ||
_manta__config__unset__help__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config unset help parent-hsm commands' commands "$@"
}
(( $+functions[_manta__config__unset__hsm_commands] )) ||
_manta__config__unset__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config unset hsm commands' commands "$@"
}
(( $+functions[_manta__config__unset__parent-hsm_commands] )) ||
_manta__config__unset__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta config unset parent-hsm commands' commands "$@"
}
(( $+functions[_manta__console_commands] )) ||
_manta__console_commands() {
    local commands; commands=(
'node:Connects to a node'\''s console' \
'target-ansible:Opens an interactive session to the ansible target container of a CFS session' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta console commands' commands "$@"
}
(( $+functions[_manta__console__help_commands] )) ||
_manta__console__help_commands() {
    local commands; commands=(
'node:Connects to a node'\''s console' \
'target-ansible:Opens an interactive session to the ansible target container of a CFS session' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta console help commands' commands "$@"
}
(( $+functions[_manta__console__help__help_commands] )) ||
_manta__console__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta console help help commands' commands "$@"
}
(( $+functions[_manta__console__help__node_commands] )) ||
_manta__console__help__node_commands() {
    local commands; commands=()
    _describe -t commands 'manta console help node commands' commands "$@"
}
(( $+functions[_manta__console__help__target-ansible_commands] )) ||
_manta__console__help__target-ansible_commands() {
    local commands; commands=()
    _describe -t commands 'manta console help target-ansible commands' commands "$@"
}
(( $+functions[_manta__console__node_commands] )) ||
_manta__console__node_commands() {
    local commands; commands=()
    _describe -t commands 'manta console node commands' commands "$@"
}
(( $+functions[_manta__console__target-ansible_commands] )) ||
_manta__console__target-ansible_commands() {
    local commands; commands=()
    _describe -t commands 'manta console target-ansible commands' commands "$@"
}
(( $+functions[_manta__delete_commands] )) ||
_manta__delete_commands() {
    local commands; commands=(
'kernel-parameters:Delete kernel parameters' \
'session:Deletes a session. For '\''image'\'' sessions, it also removes the associated image. For '\''dynamic'\'' sessions, it sets the '\''error count'\'' to its maximum value.' \
'images:WIP - Deletes a list of images.' \
'hw-component:WIP - Remove hw components from a cluster' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta delete commands' commands "$@"
}
(( $+functions[_manta__delete__help_commands] )) ||
_manta__delete__help_commands() {
    local commands; commands=(
'kernel-parameters:Delete kernel parameters' \
'session:Deletes a session. For '\''image'\'' sessions, it also removes the associated image. For '\''dynamic'\'' sessions, it sets the '\''error count'\'' to its maximum value.' \
'images:WIP - Deletes a list of images.' \
'hw-component:WIP - Remove hw components from a cluster' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta delete help commands' commands "$@"
}
(( $+functions[_manta__delete__help__help_commands] )) ||
_manta__delete__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete help help commands' commands "$@"
}
(( $+functions[_manta__delete__help__hw-component_commands] )) ||
_manta__delete__help__hw-component_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete help hw-component commands' commands "$@"
}
(( $+functions[_manta__delete__help__images_commands] )) ||
_manta__delete__help__images_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete help images commands' commands "$@"
}
(( $+functions[_manta__delete__help__kernel-parameters_commands] )) ||
_manta__delete__help__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete help kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__delete__help__session_commands] )) ||
_manta__delete__help__session_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete help session commands' commands "$@"
}
(( $+functions[_manta__delete__hw-component_commands] )) ||
_manta__delete__hw-component_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete hw-component commands' commands "$@"
}
(( $+functions[_manta__delete__images_commands] )) ||
_manta__delete__images_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete images commands' commands "$@"
}
(( $+functions[_manta__delete__kernel-parameters_commands] )) ||
_manta__delete__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__delete__session_commands] )) ||
_manta__delete__session_commands() {
    local commands; commands=()
    _describe -t commands 'manta delete session commands' commands "$@"
}
(( $+functions[_manta__get_commands] )) ||
_manta__get_commands() {
    local commands; commands=(
'hw-component:Get hardware components1 for a cluster or a node' \
'sessions:Get information from Shasta CFS session' \
'configurations:Get information from Shasta CFS configuration' \
'templates:Get information from Shasta BOS template' \
'cluster:Get cluster details' \
'nodes:Get node details' \
'hsm-groups:DEPRECATED - Please do not use this command. Get HSM groups details' \
'images:Get image information' \
'kernel-parameters:Get kernel-parameters information' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta get commands' commands "$@"
}
(( $+functions[_manta__get__cluster_commands] )) ||
_manta__get__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta get cluster commands' commands "$@"
}
(( $+functions[_manta__get__configurations_commands] )) ||
_manta__get__configurations_commands() {
    local commands; commands=()
    _describe -t commands 'manta get configurations commands' commands "$@"
}
(( $+functions[_manta__get__help_commands] )) ||
_manta__get__help_commands() {
    local commands; commands=(
'hw-component:Get hardware components1 for a cluster or a node' \
'sessions:Get information from Shasta CFS session' \
'configurations:Get information from Shasta CFS configuration' \
'templates:Get information from Shasta BOS template' \
'cluster:Get cluster details' \
'nodes:Get node details' \
'hsm-groups:DEPRECATED - Please do not use this command. Get HSM groups details' \
'images:Get image information' \
'kernel-parameters:Get kernel-parameters information' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta get help commands' commands "$@"
}
(( $+functions[_manta__get__help__cluster_commands] )) ||
_manta__get__help__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help cluster commands' commands "$@"
}
(( $+functions[_manta__get__help__configurations_commands] )) ||
_manta__get__help__configurations_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help configurations commands' commands "$@"
}
(( $+functions[_manta__get__help__help_commands] )) ||
_manta__get__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help help commands' commands "$@"
}
(( $+functions[_manta__get__help__hsm-groups_commands] )) ||
_manta__get__help__hsm-groups_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help hsm-groups commands' commands "$@"
}
(( $+functions[_manta__get__help__hw-component_commands] )) ||
_manta__get__help__hw-component_commands() {
    local commands; commands=(
'cluster:Get hw components for a cluster' \
'node:Get hw components for some nodes' \
    )
    _describe -t commands 'manta get help hw-component commands' commands "$@"
}
(( $+functions[_manta__get__help__hw-component__cluster_commands] )) ||
_manta__get__help__hw-component__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help hw-component cluster commands' commands "$@"
}
(( $+functions[_manta__get__help__hw-component__node_commands] )) ||
_manta__get__help__hw-component__node_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help hw-component node commands' commands "$@"
}
(( $+functions[_manta__get__help__images_commands] )) ||
_manta__get__help__images_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help images commands' commands "$@"
}
(( $+functions[_manta__get__help__kernel-parameters_commands] )) ||
_manta__get__help__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__get__help__nodes_commands] )) ||
_manta__get__help__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help nodes commands' commands "$@"
}
(( $+functions[_manta__get__help__sessions_commands] )) ||
_manta__get__help__sessions_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help sessions commands' commands "$@"
}
(( $+functions[_manta__get__help__templates_commands] )) ||
_manta__get__help__templates_commands() {
    local commands; commands=()
    _describe -t commands 'manta get help templates commands' commands "$@"
}
(( $+functions[_manta__get__hsm-groups_commands] )) ||
_manta__get__hsm-groups_commands() {
    local commands; commands=()
    _describe -t commands 'manta get hsm-groups commands' commands "$@"
}
(( $+functions[_manta__get__hw-component_commands] )) ||
_manta__get__hw-component_commands() {
    local commands; commands=(
'cluster:Get hw components for a cluster' \
'node:Get hw components for some nodes' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta get hw-component commands' commands "$@"
}
(( $+functions[_manta__get__hw-component__cluster_commands] )) ||
_manta__get__hw-component__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta get hw-component cluster commands' commands "$@"
}
(( $+functions[_manta__get__hw-component__help_commands] )) ||
_manta__get__hw-component__help_commands() {
    local commands; commands=(
'cluster:Get hw components for a cluster' \
'node:Get hw components for some nodes' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta get hw-component help commands' commands "$@"
}
(( $+functions[_manta__get__hw-component__help__cluster_commands] )) ||
_manta__get__hw-component__help__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta get hw-component help cluster commands' commands "$@"
}
(( $+functions[_manta__get__hw-component__help__help_commands] )) ||
_manta__get__hw-component__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta get hw-component help help commands' commands "$@"
}
(( $+functions[_manta__get__hw-component__help__node_commands] )) ||
_manta__get__hw-component__help__node_commands() {
    local commands; commands=()
    _describe -t commands 'manta get hw-component help node commands' commands "$@"
}
(( $+functions[_manta__get__hw-component__node_commands] )) ||
_manta__get__hw-component__node_commands() {
    local commands; commands=()
    _describe -t commands 'manta get hw-component node commands' commands "$@"
}
(( $+functions[_manta__get__images_commands] )) ||
_manta__get__images_commands() {
    local commands; commands=()
    _describe -t commands 'manta get images commands' commands "$@"
}
(( $+functions[_manta__get__kernel-parameters_commands] )) ||
_manta__get__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta get kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__get__nodes_commands] )) ||
_manta__get__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta get nodes commands' commands "$@"
}
(( $+functions[_manta__get__sessions_commands] )) ||
_manta__get__sessions_commands() {
    local commands; commands=()
    _describe -t commands 'manta get sessions commands' commands "$@"
}
(( $+functions[_manta__get__templates_commands] )) ||
_manta__get__templates_commands() {
    local commands; commands=()
    _describe -t commands 'manta get templates commands' commands "$@"
}
(( $+functions[_manta__help_commands] )) ||
_manta__help_commands() {
    local commands; commands=(
'config:Manta'\''s configuration' \
'get:Get information from CSM system' \
'add:Add hw components to cluster' \
'apply:Make changes to Shasta system' \
'delete:Deletes data' \
'migrate:' \
'power:Command to submit commands related to cluster/node power management' \
'log:get cfs session logs' \
'console:Opens an interective session to a node or CFS session ansible target container' \
'validate-local-repo:Check all tags and HEAD information related to a local repo exists in Gitea' \
'add-nodes-to-groups:Add nodes to a list of groups' \
'remove-nodes-from-groups:Remove nodes from groups' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta help commands' commands "$@"
}
(( $+functions[_manta__help__add_commands] )) ||
_manta__help__add_commands() {
    local commands; commands=(
'hw-component:WIP - Add hw components from a cluster' \
'kernel-parameters:Delete kernel parameters' \
    )
    _describe -t commands 'manta help add commands' commands "$@"
}
(( $+functions[_manta__help__add__hw-component_commands] )) ||
_manta__help__add__hw-component_commands() {
    local commands; commands=()
    _describe -t commands 'manta help add hw-component commands' commands "$@"
}
(( $+functions[_manta__help__add__kernel-parameters_commands] )) ||
_manta__help__add__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta help add kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__help__add-nodes-to-groups_commands] )) ||
_manta__help__add-nodes-to-groups_commands() {
    local commands; commands=()
    _describe -t commands 'manta help add-nodes-to-groups commands' commands "$@"
}
(( $+functions[_manta__help__apply_commands] )) ||
_manta__help__apply_commands() {
    local commands; commands=(
'hw-configuration:WIP - Upscale/downscale hw components in a cluster based on user input pattern. If the cluster does not exists, then a new one will be created, otherwise, the nodes of the existing cluster will be changed according to the new configuration' \
'configuration:DEPRECATED - Please use '\''manta apply sat-file'\'' command instead. Create a CFS configuration' \
'sat-file:Process a SAT file and creates the configurations, images, boot parameters and runtime configurations. If runtime configuration and boot parameters are defined, then, reboots the nodes to configure. The ansible container for the session building the image will remain running after an Ansible failure.  The container will remain running for a number of seconds specified by the '\''debug_wait_time options'\''' \
'boot:Change boot operations' \
'session:Runs the ansible script in local directory against HSM group or xnames. Note\: the local repo must alrady exists in Shasta VCS' \
'ephemeral-environment:Returns a hostname use can ssh with the image ID provided. This call is async which means, the user will have to wait a few seconds for the environment to be ready, normally, this takes a few seconds.' \
'template:Create a new BOS session from an existing BOS sessiontemplate' \
    )
    _describe -t commands 'manta help apply commands' commands "$@"
}
(( $+functions[_manta__help__apply__boot_commands] )) ||
_manta__help__apply__boot_commands() {
    local commands; commands=(
'nodes:Update the boot parameters (boot image id, runtime configuration and kernel parameters) for a list of nodes. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot nodes --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
'cluster:Update the boot parameters (boot image id, runtime configuration and kernel params) for all nodes in a cluster. The boot image could be specified by either image id or the configuration name used to create the image id. eg\: manta apply boot cluster --boot-image-configuration <cfs configuration name used to build an image> --runtime-configuration <cfs configuration name to apply during runtime configuration>' \
    )
    _describe -t commands 'manta help apply boot commands' commands "$@"
}
(( $+functions[_manta__help__apply__boot__cluster_commands] )) ||
_manta__help__apply__boot__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply boot cluster commands' commands "$@"
}
(( $+functions[_manta__help__apply__boot__nodes_commands] )) ||
_manta__help__apply__boot__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply boot nodes commands' commands "$@"
}
(( $+functions[_manta__help__apply__configuration_commands] )) ||
_manta__help__apply__configuration_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply configuration commands' commands "$@"
}
(( $+functions[_manta__help__apply__ephemeral-environment_commands] )) ||
_manta__help__apply__ephemeral-environment_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply ephemeral-environment commands' commands "$@"
}
(( $+functions[_manta__help__apply__hw-configuration_commands] )) ||
_manta__help__apply__hw-configuration_commands() {
    local commands; commands=(
'cluster:WIP - Upscale/downscale hw components in a cluster based on user input pattern. If the cluster does not exists, then a new one will be created, otherwise, the nodes of the existing cluster will be changed according to the new configuration' \
    )
    _describe -t commands 'manta help apply hw-configuration commands' commands "$@"
}
(( $+functions[_manta__help__apply__hw-configuration__cluster_commands] )) ||
_manta__help__apply__hw-configuration__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply hw-configuration cluster commands' commands "$@"
}
(( $+functions[_manta__help__apply__sat-file_commands] )) ||
_manta__help__apply__sat-file_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply sat-file commands' commands "$@"
}
(( $+functions[_manta__help__apply__session_commands] )) ||
_manta__help__apply__session_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply session commands' commands "$@"
}
(( $+functions[_manta__help__apply__template_commands] )) ||
_manta__help__apply__template_commands() {
    local commands; commands=()
    _describe -t commands 'manta help apply template commands' commands "$@"
}
(( $+functions[_manta__help__config_commands] )) ||
_manta__help__config_commands() {
    local commands; commands=(
'show:Show config values' \
'set:Change config values' \
'unset:Reset config values' \
'generate-autocomplete:Generate shell auto completion script' \
    )
    _describe -t commands 'manta help config commands' commands "$@"
}
(( $+functions[_manta__help__config__generate-autocomplete_commands] )) ||
_manta__help__config__generate-autocomplete_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config generate-autocomplete commands' commands "$@"
}
(( $+functions[_manta__help__config__set_commands] )) ||
_manta__help__config__set_commands() {
    local commands; commands=(
'hsm:Set target HSM group' \
'parent-hsm:Set parent HSM group' \
'site:Set site to work on' \
'log:Set site to work on' \
    )
    _describe -t commands 'manta help config set commands' commands "$@"
}
(( $+functions[_manta__help__config__set__hsm_commands] )) ||
_manta__help__config__set__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config set hsm commands' commands "$@"
}
(( $+functions[_manta__help__config__set__log_commands] )) ||
_manta__help__config__set__log_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config set log commands' commands "$@"
}
(( $+functions[_manta__help__config__set__parent-hsm_commands] )) ||
_manta__help__config__set__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config set parent-hsm commands' commands "$@"
}
(( $+functions[_manta__help__config__set__site_commands] )) ||
_manta__help__config__set__site_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config set site commands' commands "$@"
}
(( $+functions[_manta__help__config__show_commands] )) ||
_manta__help__config__show_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config show commands' commands "$@"
}
(( $+functions[_manta__help__config__unset_commands] )) ||
_manta__help__config__unset_commands() {
    local commands; commands=(
'hsm:Unset target HSM group' \
'parent-hsm:Unset parent HSM group' \
'auth:Unset authentication token' \
    )
    _describe -t commands 'manta help config unset commands' commands "$@"
}
(( $+functions[_manta__help__config__unset__auth_commands] )) ||
_manta__help__config__unset__auth_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config unset auth commands' commands "$@"
}
(( $+functions[_manta__help__config__unset__hsm_commands] )) ||
_manta__help__config__unset__hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config unset hsm commands' commands "$@"
}
(( $+functions[_manta__help__config__unset__parent-hsm_commands] )) ||
_manta__help__config__unset__parent-hsm_commands() {
    local commands; commands=()
    _describe -t commands 'manta help config unset parent-hsm commands' commands "$@"
}
(( $+functions[_manta__help__console_commands] )) ||
_manta__help__console_commands() {
    local commands; commands=(
'node:Connects to a node'\''s console' \
'target-ansible:Opens an interactive session to the ansible target container of a CFS session' \
    )
    _describe -t commands 'manta help console commands' commands "$@"
}
(( $+functions[_manta__help__console__node_commands] )) ||
_manta__help__console__node_commands() {
    local commands; commands=()
    _describe -t commands 'manta help console node commands' commands "$@"
}
(( $+functions[_manta__help__console__target-ansible_commands] )) ||
_manta__help__console__target-ansible_commands() {
    local commands; commands=()
    _describe -t commands 'manta help console target-ansible commands' commands "$@"
}
(( $+functions[_manta__help__delete_commands] )) ||
_manta__help__delete_commands() {
    local commands; commands=(
'kernel-parameters:Delete kernel parameters' \
'session:Deletes a session. For '\''image'\'' sessions, it also removes the associated image. For '\''dynamic'\'' sessions, it sets the '\''error count'\'' to its maximum value.' \
'images:WIP - Deletes a list of images.' \
'hw-component:WIP - Remove hw components from a cluster' \
    )
    _describe -t commands 'manta help delete commands' commands "$@"
}
(( $+functions[_manta__help__delete__hw-component_commands] )) ||
_manta__help__delete__hw-component_commands() {
    local commands; commands=()
    _describe -t commands 'manta help delete hw-component commands' commands "$@"
}
(( $+functions[_manta__help__delete__images_commands] )) ||
_manta__help__delete__images_commands() {
    local commands; commands=()
    _describe -t commands 'manta help delete images commands' commands "$@"
}
(( $+functions[_manta__help__delete__kernel-parameters_commands] )) ||
_manta__help__delete__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta help delete kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__help__delete__session_commands] )) ||
_manta__help__delete__session_commands() {
    local commands; commands=()
    _describe -t commands 'manta help delete session commands' commands "$@"
}
(( $+functions[_manta__help__get_commands] )) ||
_manta__help__get_commands() {
    local commands; commands=(
'hw-component:Get hardware components1 for a cluster or a node' \
'sessions:Get information from Shasta CFS session' \
'configurations:Get information from Shasta CFS configuration' \
'templates:Get information from Shasta BOS template' \
'cluster:Get cluster details' \
'nodes:Get node details' \
'hsm-groups:DEPRECATED - Please do not use this command. Get HSM groups details' \
'images:Get image information' \
'kernel-parameters:Get kernel-parameters information' \
    )
    _describe -t commands 'manta help get commands' commands "$@"
}
(( $+functions[_manta__help__get__cluster_commands] )) ||
_manta__help__get__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get cluster commands' commands "$@"
}
(( $+functions[_manta__help__get__configurations_commands] )) ||
_manta__help__get__configurations_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get configurations commands' commands "$@"
}
(( $+functions[_manta__help__get__hsm-groups_commands] )) ||
_manta__help__get__hsm-groups_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get hsm-groups commands' commands "$@"
}
(( $+functions[_manta__help__get__hw-component_commands] )) ||
_manta__help__get__hw-component_commands() {
    local commands; commands=(
'cluster:Get hw components for a cluster' \
'node:Get hw components for some nodes' \
    )
    _describe -t commands 'manta help get hw-component commands' commands "$@"
}
(( $+functions[_manta__help__get__hw-component__cluster_commands] )) ||
_manta__help__get__hw-component__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get hw-component cluster commands' commands "$@"
}
(( $+functions[_manta__help__get__hw-component__node_commands] )) ||
_manta__help__get__hw-component__node_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get hw-component node commands' commands "$@"
}
(( $+functions[_manta__help__get__images_commands] )) ||
_manta__help__get__images_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get images commands' commands "$@"
}
(( $+functions[_manta__help__get__kernel-parameters_commands] )) ||
_manta__help__get__kernel-parameters_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get kernel-parameters commands' commands "$@"
}
(( $+functions[_manta__help__get__nodes_commands] )) ||
_manta__help__get__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get nodes commands' commands "$@"
}
(( $+functions[_manta__help__get__sessions_commands] )) ||
_manta__help__get__sessions_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get sessions commands' commands "$@"
}
(( $+functions[_manta__help__get__templates_commands] )) ||
_manta__help__get__templates_commands() {
    local commands; commands=()
    _describe -t commands 'manta help get templates commands' commands "$@"
}
(( $+functions[_manta__help__help_commands] )) ||
_manta__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta help help commands' commands "$@"
}
(( $+functions[_manta__help__log_commands] )) ||
_manta__help__log_commands() {
    local commands; commands=()
    _describe -t commands 'manta help log commands' commands "$@"
}
(( $+functions[_manta__help__migrate_commands] )) ||
_manta__help__migrate_commands() {
    local commands; commands=(
'vCluster:WIP - Migrate vCluster' \
'nodes:Migrate nodes across vClusters' \
    )
    _describe -t commands 'manta help migrate commands' commands "$@"
}
(( $+functions[_manta__help__migrate__nodes_commands] )) ||
_manta__help__migrate__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta help migrate nodes commands' commands "$@"
}
(( $+functions[_manta__help__migrate__vCluster_commands] )) ||
_manta__help__migrate__vCluster_commands() {
    local commands; commands=(
'backup:Backup the configuration (BOS, CFS, image and HSM group) of a given vCluster/BOS session template.' \
'restore:MIGRATE RESTORE of all the nodes in a HSM group. Boot configuration means updating the image used to boot the machine. Configuration of a node means the CFS configuration with the ansible scripts running once a node has been rebooted. eg\: manta update hsm-group --boot-image <boot cfs configuration name> --desired-configuration <desired cfs configuration name>' \
    )
    _describe -t commands 'manta help migrate vCluster commands' commands "$@"
}
(( $+functions[_manta__help__migrate__vCluster__backup_commands] )) ||
_manta__help__migrate__vCluster__backup_commands() {
    local commands; commands=()
    _describe -t commands 'manta help migrate vCluster backup commands' commands "$@"
}
(( $+functions[_manta__help__migrate__vCluster__restore_commands] )) ||
_manta__help__migrate__vCluster__restore_commands() {
    local commands; commands=()
    _describe -t commands 'manta help migrate vCluster restore commands' commands "$@"
}
(( $+functions[_manta__help__power_commands] )) ||
_manta__help__power_commands() {
    local commands; commands=(
'on:Command to power on cluster/node' \
'off:Command to power off cluster/node' \
'reset:Command to power reset cluster/node' \
    )
    _describe -t commands 'manta help power commands' commands "$@"
}
(( $+functions[_manta__help__power__off_commands] )) ||
_manta__help__power__off_commands() {
    local commands; commands=(
'cluster:Command to power off all nodes in a cluster' \
'nodes:Command to power off a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
    )
    _describe -t commands 'manta help power off commands' commands "$@"
}
(( $+functions[_manta__help__power__off__cluster_commands] )) ||
_manta__help__power__off__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta help power off cluster commands' commands "$@"
}
(( $+functions[_manta__help__power__off__nodes_commands] )) ||
_manta__help__power__off__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta help power off nodes commands' commands "$@"
}
(( $+functions[_manta__help__power__on_commands] )) ||
_manta__help__power__on_commands() {
    local commands; commands=(
'cluster:Command to power on all nodes in a cluster' \
'nodes:Command to power on a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
    )
    _describe -t commands 'manta help power on commands' commands "$@"
}
(( $+functions[_manta__help__power__on__cluster_commands] )) ||
_manta__help__power__on__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta help power on cluster commands' commands "$@"
}
(( $+functions[_manta__help__power__on__nodes_commands] )) ||
_manta__help__power__on__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta help power on nodes commands' commands "$@"
}
(( $+functions[_manta__help__power__reset_commands] )) ||
_manta__help__power__reset_commands() {
    local commands; commands=(
'cluster:Command to power reset all nodes in a cluster' \
'nodes:Command to power reset a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
    )
    _describe -t commands 'manta help power reset commands' commands "$@"
}
(( $+functions[_manta__help__power__reset__cluster_commands] )) ||
_manta__help__power__reset__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta help power reset cluster commands' commands "$@"
}
(( $+functions[_manta__help__power__reset__nodes_commands] )) ||
_manta__help__power__reset__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta help power reset nodes commands' commands "$@"
}
(( $+functions[_manta__help__remove-nodes-from-groups_commands] )) ||
_manta__help__remove-nodes-from-groups_commands() {
    local commands; commands=()
    _describe -t commands 'manta help remove-nodes-from-groups commands' commands "$@"
}
(( $+functions[_manta__help__validate-local-repo_commands] )) ||
_manta__help__validate-local-repo_commands() {
    local commands; commands=()
    _describe -t commands 'manta help validate-local-repo commands' commands "$@"
}
(( $+functions[_manta__log_commands] )) ||
_manta__log_commands() {
    local commands; commands=()
    _describe -t commands 'manta log commands' commands "$@"
}
(( $+functions[_manta__migrate_commands] )) ||
_manta__migrate_commands() {
    local commands; commands=(
'vCluster:WIP - Migrate vCluster' \
'nodes:Migrate nodes across vClusters' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta migrate commands' commands "$@"
}
(( $+functions[_manta__migrate__help_commands] )) ||
_manta__migrate__help_commands() {
    local commands; commands=(
'vCluster:WIP - Migrate vCluster' \
'nodes:Migrate nodes across vClusters' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta migrate help commands' commands "$@"
}
(( $+functions[_manta__migrate__help__help_commands] )) ||
_manta__migrate__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate help help commands' commands "$@"
}
(( $+functions[_manta__migrate__help__nodes_commands] )) ||
_manta__migrate__help__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate help nodes commands' commands "$@"
}
(( $+functions[_manta__migrate__help__vCluster_commands] )) ||
_manta__migrate__help__vCluster_commands() {
    local commands; commands=(
'backup:Backup the configuration (BOS, CFS, image and HSM group) of a given vCluster/BOS session template.' \
'restore:MIGRATE RESTORE of all the nodes in a HSM group. Boot configuration means updating the image used to boot the machine. Configuration of a node means the CFS configuration with the ansible scripts running once a node has been rebooted. eg\: manta update hsm-group --boot-image <boot cfs configuration name> --desired-configuration <desired cfs configuration name>' \
    )
    _describe -t commands 'manta migrate help vCluster commands' commands "$@"
}
(( $+functions[_manta__migrate__help__vCluster__backup_commands] )) ||
_manta__migrate__help__vCluster__backup_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate help vCluster backup commands' commands "$@"
}
(( $+functions[_manta__migrate__help__vCluster__restore_commands] )) ||
_manta__migrate__help__vCluster__restore_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate help vCluster restore commands' commands "$@"
}
(( $+functions[_manta__migrate__nodes_commands] )) ||
_manta__migrate__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate nodes commands' commands "$@"
}
(( $+functions[_manta__migrate__vCluster_commands] )) ||
_manta__migrate__vCluster_commands() {
    local commands; commands=(
'backup:Backup the configuration (BOS, CFS, image and HSM group) of a given vCluster/BOS session template.' \
'restore:MIGRATE RESTORE of all the nodes in a HSM group. Boot configuration means updating the image used to boot the machine. Configuration of a node means the CFS configuration with the ansible scripts running once a node has been rebooted. eg\: manta update hsm-group --boot-image <boot cfs configuration name> --desired-configuration <desired cfs configuration name>' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta migrate vCluster commands' commands "$@"
}
(( $+functions[_manta__migrate__vCluster__backup_commands] )) ||
_manta__migrate__vCluster__backup_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate vCluster backup commands' commands "$@"
}
(( $+functions[_manta__migrate__vCluster__help_commands] )) ||
_manta__migrate__vCluster__help_commands() {
    local commands; commands=(
'backup:Backup the configuration (BOS, CFS, image and HSM group) of a given vCluster/BOS session template.' \
'restore:MIGRATE RESTORE of all the nodes in a HSM group. Boot configuration means updating the image used to boot the machine. Configuration of a node means the CFS configuration with the ansible scripts running once a node has been rebooted. eg\: manta update hsm-group --boot-image <boot cfs configuration name> --desired-configuration <desired cfs configuration name>' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta migrate vCluster help commands' commands "$@"
}
(( $+functions[_manta__migrate__vCluster__help__backup_commands] )) ||
_manta__migrate__vCluster__help__backup_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate vCluster help backup commands' commands "$@"
}
(( $+functions[_manta__migrate__vCluster__help__help_commands] )) ||
_manta__migrate__vCluster__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate vCluster help help commands' commands "$@"
}
(( $+functions[_manta__migrate__vCluster__help__restore_commands] )) ||
_manta__migrate__vCluster__help__restore_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate vCluster help restore commands' commands "$@"
}
(( $+functions[_manta__migrate__vCluster__restore_commands] )) ||
_manta__migrate__vCluster__restore_commands() {
    local commands; commands=()
    _describe -t commands 'manta migrate vCluster restore commands' commands "$@"
}
(( $+functions[_manta__power_commands] )) ||
_manta__power_commands() {
    local commands; commands=(
'on:Command to power on cluster/node' \
'off:Command to power off cluster/node' \
'reset:Command to power reset cluster/node' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power commands' commands "$@"
}
(( $+functions[_manta__power__help_commands] )) ||
_manta__power__help_commands() {
    local commands; commands=(
'on:Command to power on cluster/node' \
'off:Command to power off cluster/node' \
'reset:Command to power reset cluster/node' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power help commands' commands "$@"
}
(( $+functions[_manta__power__help__help_commands] )) ||
_manta__power__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta power help help commands' commands "$@"
}
(( $+functions[_manta__power__help__off_commands] )) ||
_manta__power__help__off_commands() {
    local commands; commands=(
'cluster:Command to power off all nodes in a cluster' \
'nodes:Command to power off a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
    )
    _describe -t commands 'manta power help off commands' commands "$@"
}
(( $+functions[_manta__power__help__off__cluster_commands] )) ||
_manta__power__help__off__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power help off cluster commands' commands "$@"
}
(( $+functions[_manta__power__help__off__nodes_commands] )) ||
_manta__power__help__off__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power help off nodes commands' commands "$@"
}
(( $+functions[_manta__power__help__on_commands] )) ||
_manta__power__help__on_commands() {
    local commands; commands=(
'cluster:Command to power on all nodes in a cluster' \
'nodes:Command to power on a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
    )
    _describe -t commands 'manta power help on commands' commands "$@"
}
(( $+functions[_manta__power__help__on__cluster_commands] )) ||
_manta__power__help__on__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power help on cluster commands' commands "$@"
}
(( $+functions[_manta__power__help__on__nodes_commands] )) ||
_manta__power__help__on__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power help on nodes commands' commands "$@"
}
(( $+functions[_manta__power__help__reset_commands] )) ||
_manta__power__help__reset_commands() {
    local commands; commands=(
'cluster:Command to power reset all nodes in a cluster' \
'nodes:Command to power reset a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
    )
    _describe -t commands 'manta power help reset commands' commands "$@"
}
(( $+functions[_manta__power__help__reset__cluster_commands] )) ||
_manta__power__help__reset__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power help reset cluster commands' commands "$@"
}
(( $+functions[_manta__power__help__reset__nodes_commands] )) ||
_manta__power__help__reset__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power help reset nodes commands' commands "$@"
}
(( $+functions[_manta__power__off_commands] )) ||
_manta__power__off_commands() {
    local commands; commands=(
'cluster:Command to power off all nodes in a cluster' \
'nodes:Command to power off a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power off commands' commands "$@"
}
(( $+functions[_manta__power__off__cluster_commands] )) ||
_manta__power__off__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power off cluster commands' commands "$@"
}
(( $+functions[_manta__power__off__help_commands] )) ||
_manta__power__off__help_commands() {
    local commands; commands=(
'cluster:Command to power off all nodes in a cluster' \
'nodes:Command to power off a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power off help commands' commands "$@"
}
(( $+functions[_manta__power__off__help__cluster_commands] )) ||
_manta__power__off__help__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power off help cluster commands' commands "$@"
}
(( $+functions[_manta__power__off__help__help_commands] )) ||
_manta__power__off__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta power off help help commands' commands "$@"
}
(( $+functions[_manta__power__off__help__nodes_commands] )) ||
_manta__power__off__help__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power off help nodes commands' commands "$@"
}
(( $+functions[_manta__power__off__nodes_commands] )) ||
_manta__power__off__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power off nodes commands' commands "$@"
}
(( $+functions[_manta__power__on_commands] )) ||
_manta__power__on_commands() {
    local commands; commands=(
'cluster:Command to power on all nodes in a cluster' \
'nodes:Command to power on a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power on commands' commands "$@"
}
(( $+functions[_manta__power__on__cluster_commands] )) ||
_manta__power__on__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power on cluster commands' commands "$@"
}
(( $+functions[_manta__power__on__help_commands] )) ||
_manta__power__on__help_commands() {
    local commands; commands=(
'cluster:Command to power on all nodes in a cluster' \
'nodes:Command to power on a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power on help commands' commands "$@"
}
(( $+functions[_manta__power__on__help__cluster_commands] )) ||
_manta__power__on__help__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power on help cluster commands' commands "$@"
}
(( $+functions[_manta__power__on__help__help_commands] )) ||
_manta__power__on__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta power on help help commands' commands "$@"
}
(( $+functions[_manta__power__on__help__nodes_commands] )) ||
_manta__power__on__help__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power on help nodes commands' commands "$@"
}
(( $+functions[_manta__power__on__nodes_commands] )) ||
_manta__power__on__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power on nodes commands' commands "$@"
}
(( $+functions[_manta__power__reset_commands] )) ||
_manta__power__reset_commands() {
    local commands; commands=(
'cluster:Command to power reset all nodes in a cluster' \
'nodes:Command to power reset a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power reset commands' commands "$@"
}
(( $+functions[_manta__power__reset__cluster_commands] )) ||
_manta__power__reset__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power reset cluster commands' commands "$@"
}
(( $+functions[_manta__power__reset__help_commands] )) ||
_manta__power__reset__help_commands() {
    local commands; commands=(
'cluster:Command to power reset all nodes in a cluster' \
'nodes:Command to power reset a group of nodes. eg\: '\''x1001c1s0b0n1,x1001c1s0b1n0'\''' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'manta power reset help commands' commands "$@"
}
(( $+functions[_manta__power__reset__help__cluster_commands] )) ||
_manta__power__reset__help__cluster_commands() {
    local commands; commands=()
    _describe -t commands 'manta power reset help cluster commands' commands "$@"
}
(( $+functions[_manta__power__reset__help__help_commands] )) ||
_manta__power__reset__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'manta power reset help help commands' commands "$@"
}
(( $+functions[_manta__power__reset__help__nodes_commands] )) ||
_manta__power__reset__help__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power reset help nodes commands' commands "$@"
}
(( $+functions[_manta__power__reset__nodes_commands] )) ||
_manta__power__reset__nodes_commands() {
    local commands; commands=()
    _describe -t commands 'manta power reset nodes commands' commands "$@"
}
(( $+functions[_manta__remove-nodes-from-groups_commands] )) ||
_manta__remove-nodes-from-groups_commands() {
    local commands; commands=()
    _describe -t commands 'manta remove-nodes-from-groups commands' commands "$@"
}
(( $+functions[_manta__validate-local-repo_commands] )) ||
_manta__validate-local-repo_commands() {
    local commands; commands=()
    _describe -t commands 'manta validate-local-repo commands' commands "$@"
}

if [ "$funcstack[1]" = "_manta" ]; then
    _manta "$@"
else
    compdef _manta manta
fi
