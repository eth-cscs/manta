# build = "build.rs"

[package]
edition = "2021"
authors = ["Manuel Sopena Ballesteros <msopena@cscs.ch>", "Miguel Gila <miguel.gila@cscs.ch>"]
name = "manta"
description = "Another CLI for ALPS"
version = "1.54.1-beta.139"
license-file = "LICENSE"
documentation = "https://github.com/eth-cscs/manta/blob/main/README.md"
homepage = "https://github.com/eth-cscs/manta/blob/main/README.md"
repository = "https://github.com/eth-cscs/manta"
keywords = ["cli", "Cray Management System", "productivity"]
publish = false                                                         # cargo dist --> Avoid publishing to crates.io

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

# [build-dependencies]
# clap = "*"
# clap_complete = "*"
# mesa = "*"
# # mesa = { path = "../mesa" } # Only for development purposes
# strum = "*"
# strum_macros = "*"

[dependencies]
mesa = { workspace = true }
manta-backend-dispatcher = { workspace = true }
ochami-rs = { workspace = true }
#mesa = "0.43.18"

anyhow = "1.0.44"
base64 = { workspace = true }
#chrono = "0.4.31"
chrono = { workspace = true }
clap_complete = "4.3.2"
clap = { version = "4.3.21", features = ["derive", "cargo", "wrap_help"] }
#comfy-table = "6.1.1"                                                      # used to print mata's command output to stdout as tables
comfy-table = { workspace = true }                                                      # used to print mata's command output to stdout as tables
#config = { version = "0.13.2", features = [ "toml" ] } # used to read manta configuration file
config = { workspace = true, features = [ "toml" ] } # used to read manta configuration file
crossterm = "0.29.0"
# dhat = "0.3.2"                                                             # used for memory profiling
#dialoguer = "0.11.0"
dialoguer = { workspace = true }
# digest = "0.10.7"
#directories = "4.0.1"                                                      # XDG Base Directory Specification
directories = { workspace = true }                                          # XDG Base Directory Specification
execute = "0.2.13"
# exitcode = "1.1.2"
#futures = "0.3.28"
futures = { workspace = true }
# futures-util = "0.3.24"
#git2 = { version = "0.18.1", default-features = false, features = ["https"] }              # Keep vendored-openssl feature, otherwise CI/CD pipeline will fail building apple images
git2 = { workspace = true, default-features = false, features = ["https"] }              # Keep vendored-openssl feature, otherwise CI/CD pipeline will fail building apple images
# git2 = { version = "0.18.1", features = ["vendored-openssl"] }              # Keep vendored-openssl feature, otherwise CI/CD pipeline will fail building apple images
#hostlist-parser = "0.1.6"
hostlist-parser = { workspace = true }
#humansize = "2.0.0"
humansize = { workspace =  true }
# hyper = { version = "0.14", features = [ "full" ] } # needed by kube-rs (to operate with kube api)
indicatif = "0.17.7"
is_executable = "1.0.1"
# json-patch = "1.4.0"
# k8s-openapi = { version = "0.19.0" }
#k8s-openapi = { version = "0.20.0", features = ["v1_26"] }
k8s-openapi = { workspace = true, features = ["v1_26"] }
# kube = { version = "0.85.0", features = [ "client", "runtime", "derive", "rustls-tls", "ws" ] }
#kube = { version = "0.87.2", features = ["kube-client", "kube-runtime", "derive", "rustls-tls", "ws"] }
kube = { workspace = true, features = ["kube-client", "kube-runtime", "derive", "rustls-tls", "ws"] }
#log = "0.4.17"
log = { workspace = true }
#log4rs = "1.2.0" # Docs about pattern encoder https://docs.rs/log4rs/0.10.0/log4rs/encode/pattern/index.html
log4rs = { workspace = true }# Docs about pattern encoder https://docs.rs/log4rs/0.10.0/log4rs/encode/pattern/index.html
md5 = { version = "0.7.0", features = [] }
minijinja = { version = "2.4.0", features = ["custom_syntax"] }
#rdkafka = { version = "0.37", features = ["cmake-build"] }
rdkafka = { workspace = true, features = ["cmake-build"] }
#regex = "1.6.0"
regex = { workspace = true }
#reqwest = { version = "0.11", default-features = false, features = ["blocking", "json", "rustls-tls", "socks"] }
reqwest = { workspace = true, default-features = false, features = ["blocking", "json", "rustls-tls", "socks"] }
#serde_json = "1.0"
serde_json = { workspace = true }
#serde = { version = "1.0.145", features = ["derive"] } 
serde = { workspace = true, features = ["derive"] } 
#serde_yaml = "0.9.17" # TODO: deprecated, need to replace, potential candidate: yaml-rust2
serde_yaml = { workspace = true } # TODO: deprecated, need to replace, potential candidate: yaml-rust2
#strum = "0.25.0"
#strum_macros = "0.25"
strum_macros = { workspace = true }
strum = { workspace = true }
substring = "1.4.5"
termion = "2.0.1"                                                          # used by manta_console to enable terminal raw and also to print text in color
# tokio-stream = "0.1.11" # used by manta_console to create a read stream from container stdout (alternative?)
#tokio-util = "0.7.4" # used by manta_console to create a read stream from container stdout
tokio-util = { workspace = true } # used by manta_console to create a read stream from container stdout
#tokio = { version = "1.14", features = ["full"] }
tokio = { workspace = true, features = ["full"] }
toml = "0.8.16"
toml_edit = "0.22.26" # used to edit manta configuration file
# tracing-subscriber = "0.3.16"
#uuid = { version = "1.10.0", features = ["v4", "fast-rng"] }
uuid = { workspace = true, features = ["v4", "fast-rng"] }

[profile.release]
opt-level = "s" # Tell `rustc` to optimize for small code size.
#incremental = true
debug = 1

#[features]
#dhat-heap = []    # if you are doing heap profiling
#dhat-ad-hoc = []  # if you are doing ad hoc profiling

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

# Config for `cargo release`
[package.metadata.release]
pre-release-hook = [
  "git",
  "cliff",
  "-o",
  "CHANGELOG.md",
  "--tag",
  "{{version}}",
] # [Generates CHANGELOG automatically] (https://github.com/crate-ci/cargo-release/blob/master/docs/faq.md#maintaining-changelog) using [git cliff](https://github.com/orhun/git-cliff) as a dependency
